<category name="Adam's Custom Tools" color="#de3900">
    <block type="shortCutsBlock"></block>
    <block type="improvedSearch"></block>
    <block type="minimap"></block>
    <block type="addMenuBlock"></block> 
    <block type="mathExpression"></block>
</category>

<script>
    function code() {
      return `

        // âœ… Embedded Block Database (AUTO-INJECTED)
        window.BLOCK_DATABASE = {
  "blocks": {
    "whenClicked": {
      "category": "Events",
      "displayName": "when clicked",
      "searchTerms": [
        "when clicked",
        "click",
        "mouse click",
        "tap",
        "touch",
        "interaction",
        "user input",
        "click event",
        "mouse event"
      ],
      "description": "Waits until a user clicks on a specified 3D object, then runs puzzles in the do slot. Supports advanced options like x-ray clicking, double click/tap, and specific mouse buttons."
    },
    "pickedObject": {
      "category": "Events",
      "displayName": "picked object",
      "searchTerms": [
        "picked object",
        "clicked object",
        "selected object",
        "click target",
        "object clicked",
        "click result",
        "target object"
      ],
      "description": "Returns an object a user has clicked on. Intended for use with the when clicked puzzle."
    },
    "whenHovered": {
      "category": "Events",
      "displayName": "when hovered",
      "searchTerms": [
        "when hovered",
        "hover",
        "mouse hover",
        "mouse over",
        "mouse enter",
        "mouse leave",
        "cursor over",
        "hover event",
        "mouse interaction"
      ],
      "description": "Waits until a user hovers over/out a specified 3D object, then runs puzzles in the over/out: do slot. Works only on devices with mouse cursor (desktops/laptops)."
    },
    "hoveredObject": {
      "category": "Events",
      "displayName": "hovered object",
      "searchTerms": [
        "hovered object",
        "object hovered",
        "hover target",
        "mouse over object",
        "cursor object",
        "hover result"
      ],
      "description": "Returns an object a user has hovered over. Intended for use with the when hovered puzzle. Works only on devices with mouse cursor."
    },
    "whenMoved": {
      "category": "Events",
      "displayName": "when moved",
      "searchTerms": [
        "when moved",
        "object movement",
        "track movement",
        "position change",
        "rotation change",
        "scale change",
        "velocity",
        "movement detection",
        "object tracking"
      ],
      "description": "Tracks any movements (position, rotation and scale) of a specified object. Runs puzzles in start: do slot when object starts moving, while moving: do slot during movement, and stop: do slot when movement stops."
    },
    "whenDraggedOver": {
      "category": "Events",
      "displayName": "when dragged",
      "searchTerms": [
        "when dragged",
        "drag",
        "drag over",
        "mouse drag",
        "touch drag",
        "gesture",
        "drag event",
        "drag interaction"
      ],
      "description": "Waits until a user drags over a specified 3D object with the mouse or touch gesture, then generates movement data for using in drag move, drag rotate or drag scale puzzles."
    },
    "dragMoveAdv": {
      "category": "Events",
      "displayName": "drag move",
      "searchTerms": [
        "drag move",
        "move object",
        "drag movement",
        "translate",
        "position",
        "xyz movement",
        "free movement",
        "constrained movement"
      ],
      "description": "Moves a specified 3D object in accordance to dragging movement data generated by the when dragged puzzle. Use mode to limit movement to particular axis or plane, or set XYZ to move freely in all directions."
    },
    "dragRotateAdv": {
      "category": "Events",
      "displayName": "drag rotate",
      "searchTerms": [
        "drag rotate",
        "rotate object",
        "rotation",
        "turn",
        "spin",
        "angular movement",
        "axis rotation"
      ],
      "description": "Rotates a specified 3D object in accordance to dragging movement data generated by the when dragged puzzle. Use mode to limit rotation to a particular axis."
    },
    "dragScale": {
      "category": "Events",
      "displayName": "drag scale",
      "searchTerms": [
        "drag scale",
        "scale object",
        "resize",
        "size change",
        "uniform scale",
        "axis scale",
        "dimensions"
      ],
      "description": "Scales a specified 3D object in accordance to dragging movement data generated by the when dragged puzzle. Use mode to limit scaling to a particular axis or set XYZ to scale the object uniformly."
    },
    "objectList": {
      "category": "Selectors",
      "displayName": "select object",
      "searchTerms": [
        "select object",
        "object selector",
        "choose object",
        "pick object",
        "object list",
        "dropdown",
        "object menu",
        "scene object",
        "3D object"
      ],
      "description": "Contains a drop-down with an alphabetized list of all objects on the scene. Use this to select a specific 3D object for operations like movement, rotation, scaling, or other transformations."
    },
    "allObjectList": {
      "category": "Selectors",
      "displayName": "all objects",
      "searchTerms": [
        "all objects",
        "every object",
        "all scene objects",
        "bulk operation",
        "mass operation",
        "select all",
        "entire scene",
        "all 3D objects"
      ],
      "description": "Denotes all objects on the scene so that an operation can be applied to them in bulk. This puzzle is not iterable - to iterate over a list of objects, use the get objects from puzzle instead."
    },
    "groupList": {
      "category": "Selectors",
      "displayName": "select group",
      "searchTerms": [
        "select group",
        "group selector",
        "collection",
        "object group",
        "group operation",
        "bulk group",
        "scene collection",
        "blender collection",
        "3ds max group",
        "maya group"
      ],
      "description": "Contains a drop-down with an alphabetized list of all object groups in the scene. An operation can be applied to a group of objects in bulk. What the 'group' represents depends on your modeling suite: Blender collections, 3ds Max groups/selection sets, or Maya groups/sets."
    },
    "animationList": {
      "category": "Selectors",
      "displayName": "select animation",
      "searchTerms": [
        "select animation",
        "animation selector",
        "animation clip",
        "choose animation",
        "animation list",
        "clip selector",
        "motion",
        "keyframe animation"
      ],
      "description": "Contains a drop-down with an alphabetized list of all animation clips in the scene. An animation clip is named according to the object to which animation is applied in Blender, 3ds Max or Maya."
    },
    "materialList": {
      "category": "Selectors",
      "displayName": "select material",
      "searchTerms": [
        "select material",
        "material selector",
        "choose material",
        "material list",
        "texture material",
        "shader material",
        "surface material",
        "material properties"
      ],
      "description": "Contains a drop-down with an alphabetized list of all materials that are present in the scene. Use this to select materials for operations like changing properties, applying textures, or modifying shader settings."
    },
    "getEntityByName": {
      "category": "Selectors",
      "displayName": "get by name",
      "searchTerms": [
        "get by name",
        "select by name",
        "find by name",
        "name selector",
        "dynamic selection",
        "programmatic selection",
        "runtime selection",
        "named entity"
      ],
      "description": "Select an entity (object, group, animation clip, or material) given by its name. The most common use case is dynamic scene loading, when the names of loaded entities can't be selected via the list-based selectors."
    },
    "show": {
      "category": "Objects",
      "displayName": "show",
      "searchTerms": [
        "show",
        "make visible",
        "display object",
        "unhide",
        "reveal",
        "show object",
        "visibility",
        "make appear"
      ],
      "description": "Makes a specified object, that was initially or previously hidden, visible. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. If there is no such object(s) present in the scene, or an object is already visible, does nothing."
    },
    "hide": {
      "category": "Objects",
      "displayName": "hide",
      "searchTerms": [
        "hide",
        "make invisible",
        "conceal",
        "hide object",
        "invisibility",
        "make disappear",
        "remove from view"
      ],
      "description": "Makes a specified object invisible. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. If there is no such object(s) present in the scene, or an object is already invisible, does nothing."
    },
    "isObjectVisible": {
      "category": "Objects",
      "displayName": "is visible",
      "searchTerms": [
        "is visible",
        "check visibility",
        "object visible",
        "visibility check",
        "is object visible",
        "check if visible",
        "visible status"
      ],
      "description": "Checks if an object (or any of objects in a list) is currently visible. If it so, returns the logical value true, otherwise returns false. If there is no such object(s) present in the scene, returns false."
    },
    "cloneObject": {
      "category": "Objects",
      "displayName": "clone object",
      "searchTerms": [
        "clone object",
        "copy object",
        "duplicate",
        "object copy",
        "create copy",
        "duplicate object",
        "object clone"
      ],
      "description": "Makes an object copy, generates a unique name for the new object and immediately adds it to the scene. Outputs the new object name. Does not work with lists, groups or the all objects puzzle. Supports additional options like cloning materials and preserving object groups."
    },
    "createObject": {
      "category": "Objects",
      "displayName": "create object",
      "searchTerms": [
        "create object",
        "new object",
        "add object",
        "generate object",
        "make object",
        "primitive object",
        "geometry object",
        "plane with texture",
        "plane with html"
      ],
      "description": "Creates and adds a new object to the scene. This puzzle creates objects without the need in a 3D editor, useful for learning visual programming and designing primitive visuals. For geometry objects, creates white-colored dielectric PBR material. For plane with html, creates planes that render HTML-based resources."
    },
    "removeObject": {
      "category": "Objects",
      "displayName": "remove object",
      "searchTerms": [
        "remove object",
        "delete object",
        "remove from scene",
        "delete from scene",
        "remove 3D object",
        "delete 3D object"
      ],
      "description": "Removes a specified object from the scene. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. If there is no such object(s) present in the scene, does nothing."
    },
    "setObjTransform": {
      "category": "Objects",
      "displayName": "set transform",
      "searchTerms": [
        "set transform",
        "move object",
        "rotate object",
        "scale object",
        "position object",
        "transform object",
        "set position",
        "set rotation",
        "set scale",
        "offset transform"
      ],
      "description": "Moves, rotates or scales an object according to specified transform data. The offset checkbox enables moving/rotating/scaling an object relatively to the original position/rotation/scale. Any of the axis inputs can be left blank. Also works for lists, groups or all objects."
    },
    "getObjTransform": {
      "category": "Objects",
      "displayName": "get transform",
      "searchTerms": [
        "get transform",
        "get position",
        "get rotation",
        "get scale",
        "object position",
        "object rotation",
        "object scale",
        "retrieve transform",
        "world space transform"
      ],
      "description": "Retrieves the position, rotation or scale data of an object. To retrieve transformations in world space click on the gear icon and set on checkbox 'world space' (retrieve euler rotation in XYZ order). Does not work with lists, groups or the all objects puzzle."
    },
    "applyObjLocalTransform": {
      "category": "Objects",
      "displayName": "change local transform",
      "searchTerms": [
        "change local transform",
        "local transform",
        "local space",
        "local movement",
        "local rotation",
        "local scale",
        "relative transform",
        "object space"
      ],
      "description": "Moves, rotates or scales an object according to specified transform data in its local space. Any of the axis inputs can be left blank. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle."
    },
    "snapToObject": {
      "category": "Objects",
      "displayName": "snap to object",
      "searchTerms": [
        "snap to object",
        "snap object",
        "align to object",
        "copy transform",
        "match position",
        "match transform",
        "object alignment"
      ],
      "description": "Moves an object to the position of another object by copying its transform data. Also copies rotation and scale. Does not work with lists, groups or the all objects puzzle."
    },
    "makeParent": {
      "category": "Objects",
      "displayName": "parent",
      "searchTerms": [
        "parent",
        "parent object",
        "create parent",
        "object parent",
        "parent relation",
        "hierarchy",
        "parent child",
        "unparent"
      ],
      "description": "Creates a parent relation between objects, so that the first object follows position/rotation/scale of the second one. Does not work with lists, groups or the all objects puzzle. Specify <none> as the second value to unparent the object."
    },
    "setObjDirection": {
      "category": "Objects",
      "displayName": "set object direction",
      "searchTerms": [
        "set object direction",
        "object direction",
        "look at",
        "point to",
        "orient object",
        "object orientation",
        "direction vector",
        "lock up axis"
      ],
      "description": "Set an object's direction to the point/vector with X, Y, Z coordinates. The point checkbox specifies whether the X, Y, Z coordinates belong to some point in 3D space or represent a direction vector. The lock up checkbox locks the up-down axis of the object."
    },
    "getObjDirection": {
      "category": "Objects",
      "displayName": "get object direction",
      "searchTerms": [
        "get object direction",
        "object direction",
        "direction vector",
        "object orientation",
        "get orientation",
        "direction components"
      ],
      "description": "Returns an object's direction vector or numeric X, Y, Z vector components."
    },
    "getObjectsFrom": {
      "category": "Objects",
      "displayName": "get objects from",
      "searchTerms": [
        "get objects from",
        "object list",
        "filter objects",
        "object filter",
        "name filter",
        "object names",
        "unique object ids",
        "object selection"
      ],
      "description": "Returns a list of objects from a specified group. The name filter option allows filtering objects by names including the specified text. The return unique object ids option can be used to retrieve unique object IDs instead of names, important for dynamically loaded objects with same names."
    },
    "setMorphFactor": {
      "category": "Objects",
      "displayName": "set morph factor",
      "searchTerms": [
        "set morph factor",
        "morph factor",
        "morph target",
        "shape key",
        "blend shape",
        "morphing",
        "flexible target input"
      ],
      "description": "Sets an object's morph target factor. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. You can set a morph target by passing the name as text using the flexible target input option."
    },
    "getMorphFactor": {
      "category": "Objects",
      "displayName": "get morph factor",
      "searchTerms": [
        "get morph factor",
        "morph factor",
        "morph target",
        "shape key",
        "blend shape",
        "morphing value",
        "flexible target input"
      ],
      "description": "Returns an object's morph target factor (aka value or weight). Does not work with lists, groups or the all objects puzzle. You can get a morph target by passing the name as text using the flexible target input option."
    },
    "makeObjectCSG": {
      "category": "Objects",
      "displayName": "make object from",
      "searchTerms": [
        "make object from",
        "boolean operation",
        "CSG",
        "constructive solid geometry",
        "union",
        "intersection",
        "difference",
        "clipping plane"
      ],
      "description": "Create a new object by applying boolean (also called CSG or constructive solid geometry) operation on two input objects. If the clean checkbox is not set, the input objects are not affected and should be hidden/removed explicitly. Can also use clipping plane with intersect operation."
    },
    "addAnnotation": {
      "category": "Objects",
      "displayName": "add annotation",
      "searchTerms": [
        "add annotation",
        "annotation",
        "point of interest",
        "info point",
        "description point",
        "label",
        "HTML annotation",
        "fade annotations"
      ],
      "description": "Adds a point of interest icon to an object that a user can expand by clicking on it to see some description. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. Creates 2 HTML elements (label and description) which can be styled."
    },
    "removeAnnotation": {
      "category": "Objects",
      "displayName": "remove annotation",
      "searchTerms": [
        "remove annotation",
        "delete annotation",
        "remove point of interest",
        "delete info point"
      ],
      "description": "Removes a previously added annotation from an object. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle."
    },
    "openAnnotation": {
      "category": "Objects",
      "displayName": "open annotation",
      "searchTerms": [
        "open annotation",
        "expand annotation",
        "show annotation",
        "display annotation"
      ],
      "description": "Expands an annotation specified by its label."
    },
    "closeAnnotation": {
      "category": "Objects",
      "displayName": "close annotation",
      "searchTerms": [
        "close annotation",
        "collapse annotation",
        "hide annotation",
        "minimize annotation"
      ],
      "description": "Closes an annotation specified by its label."
    },
    "createTextObject": {
      "category": "Objects",
      "displayName": "create text object",
      "searchTerms": [
        "create text object",
        "text object",
        "3D text",
        "text geometry",
        "text mesh",
        "font",
        "text size",
        "text extrusion",
        "text bevel"
      ],
      "description": "Generates a new text object according to the specified textual content and parameters. Basic options include text content, font (WOFF, TTF, OTF), size, and extrusion. Advanced options include segments, bevel thickness/size, and horizontal/vertical alignment."
    },
    "updateTextObject": {
      "category": "Objects",
      "displayName": "update text object",
      "searchTerms": [
        "update text object",
        "modify text",
        "change text",
        "text update",
        "text mesh update"
      ],
      "description": "Updates mesh for a text object according to specified textual content. The text object should be created either by using the create text object puzzle or exported from the modeling suite. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle."
    },
    "getObjectDimension": {
      "category": "Objects",
      "displayName": "get object dimension",
      "searchTerms": [
        "get object dimension",
        "object dimension",
        "object size",
        "object width",
        "object height",
        "object depth",
        "dimensions",
        "local coordinate system",
        "world coordinate system"
      ],
      "description": "Outputs object dimensions as numeric X, Y, Z components or as XYZ vector in either local coordinate system (with scaling applied) or world coordinate system. In the world mode, also works for lists, groups or all objects. Has limitations for morphed and skinned objects."
    },
    "distanceBetweenObjects": {
      "category": "Objects",
      "displayName": "distance",
      "searchTerms": [
        "distance",
        "distance between objects",
        "object distance",
        "calculate distance",
        "measure distance",
        "spatial distance"
      ],
      "description": "Outputs the distance between two specified objects. Does not work with lists, groups or the all objects puzzle."
    },
    "getObjCustomProps": {
      "category": "Objects",
      "displayName": "get custom props",
      "searchTerms": [
        "get custom props",
        "custom properties",
        "object properties",
        "custom attributes",
        "object attributes",
        "custom data"
      ],
      "description": "Returns a dictionary with custom properties assigned to an object. Custom properties can be assigned in Blender using the Custom Properties panel, in 3ds Max via Object Properties dialog, or in Maya using Attributes â†’ Add Attributes... menu."
    },
    "outline": {
      "category": "Objects",
      "displayName": "outline",
      "searchTerms": [
        "outline",
        "object outline",
        "outline effect",
        "highlight object",
        "object highlight",
        "edge highlight"
      ],
      "description": "Applies or removes the outline effect to/from a specified object. Requires enabling the outline effect in Blender, 3ds Max or Maya. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle."
    },
    "setShadowParam": {
      "category": "Objects",
      "displayName": "set shadow param",
      "searchTerms": [
        "set shadow param",
        "shadow parameters",
        "cast shadow",
        "receive shadow",
        "shadow casting",
        "shadow receiving",
        "shadow settings"
      ],
      "description": "Enable/disable casting/receiving shadows for the given object. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle."
    },
    "updateLightProbe": {
      "category": "Objects",
      "displayName": "update light probe object(s)",
      "searchTerms": [
        "update light probe object(s)",
        "light probe",
        "reflection cubemap",
        "rerender cubemap",
        "update reflections",
        "light probe update"
      ],
      "description": "Updates/rerenders the reflection cubemap for the given light probe object."
    },
    "assignMaterial": {
      "category": "Materials",
      "displayName": "assign material",
      "searchTerms": [
        "assign material",
        "apply material",
        "set material",
        "change material",
        "material assignment",
        "replace material",
        "multi-material index",
        "material slot"
      ],
      "description": "Assigns a material to an object, completely replacing the old material. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. Requires a material assigned to some existing model as a swatch card. Source and destination meshes should have the same layout for UVs and color attributes. Supports multi-material meshes with index input."
    },
    "replaceTexture": {
      "category": "Materials",
      "displayName": "replace texture",
      "searchTerms": [
        "replace texture",
        "change texture",
        "update texture",
        "texture replacement",
        "image texture",
        "video texture",
        "canvas texture",
        "once ready do",
        "flexible texture input",
        "prevent texture sharing"
      ],
      "description": "Replaces a texture found for a specified material with the one loaded from the provided image URL, video asset, or canvas. Supports advanced options like 'once ready do' slot for post-loading actions, flexible texture input for text-based URLs, and prevent texture sharing to avoid conflicts between shared materials."
    },
    "getTextureParam": {
      "category": "Materials",
      "displayName": "get texture param",
      "searchTerms": [
        "get texture param",
        "texture parameters",
        "texture width",
        "texture height",
        "texture aspect",
        "texture dimensions",
        "texture size"
      ],
      "description": "Retrieves the following parameters for a texture found for a specified material: width, height, aspect or dimensions."
    },
    "setMaterialColor": {
      "category": "Materials",
      "displayName": "set color",
      "searchTerms": [
        "set color",
        "change color",
        "material color",
        "RGB color",
        "base color",
        "diffuse color",
        "emissive color",
        "color components",
        "RGB nodes",
        "BSDF color"
      ],
      "description": "Set R, G and B components of a color parameter found for a specified material. Supports RGB nodes in Blender, Controllers in 3ds Max, Color Constant nodes in Maya, and glTF-compliant PBR materials (BaseColor, Emissive). Can also modify environment shaders starting with 'Verge3D_Environment'."
    },
    "getMaterialColor": {
      "category": "Materials",
      "displayName": "get color",
      "searchTerms": [
        "get color",
        "retrieve color",
        "color parameter",
        "red component",
        "green component",
        "blue component",
        "RGB components",
        "CSS hex",
        "CSS rgb",
        "flexible color input"
      ],
      "description": "Get color parameter found for a specified material. Returns red, green, blue components individually, RGB as vector/list, CSS hex format (#AA00FF), or CSS rgb format (rgb(127, 0, 255)). Supports flexible color input for custom material parameters."
    },
    "setMaterialValue": {
      "category": "Materials",
      "displayName": "set value",
      "searchTerms": [
        "set value",
        "change value",
        "material value",
        "value parameter",
        "metalness",
        "roughness",
        "bump scale",
        "emissive intensity",
        "env map intensity",
        "Value nodes",
        "Controllers",
        "Float Constant"
      ],
      "description": "Set a value parameter found for a specified material. Supports Value nodes in Blender, Controllers in 3ds Max, Float Constant nodes in Maya, and glTF-compliant PBR materials (metalness, roughness, bumpScale, emissiveIntensity, envMapIntensity). Can also modify environment shaders."
    },
    "getMaterialValue": {
      "category": "Materials",
      "displayName": "get value",
      "searchTerms": [
        "get value",
        "retrieve value",
        "value parameter",
        "material value",
        "flexible value input"
      ],
      "description": "Get a value parameter found for a specified material. Supports flexible value input to assign custom material parameter as string value."
    },
    "getObjectMaterial": {
      "category": "Materials",
      "displayName": "material from",
      "searchTerms": [
        "material from",
        "get material",
        "object material",
        "material name",
        "multi-material index",
        "return unique material id",
        "material identifier"
      ],
      "description": "Retrieves the name of a material assigned to an object. By default, if multiple materials are assigned to the same object, returns the first one. Supports multi-material index for specific material slots and return unique material id for single-object material selection."
    },
    "textureFromTextAdv": {
      "category": "Materials",
      "displayName": "texture from text",
      "searchTerms": [
        "texture from text",
        "text to texture",
        "texture generation",
        "text image",
        "font texture",
        "text rendering",
        "texture creation",
        "text alignment",
        "box parameters",
        "color parameters"
      ],
      "description": "Creates an image from specified text and returns it in Data URL format. Parameters include text content, dimensions (width/height), font family, size, horizontal/vertical alignment, line height, justify. Advanced options include box parameters (position/size) and color parameters (text/background colors). Power-of-two dimensions recommended."
    },
    "getColorFromPicker": {
      "category": "Materials",
      "displayName": "color picker",
      "searchTerms": [
        "color picker",
        "color selection",
        "pick color",
        "color chooser",
        "color tool"
      ],
      "description": "Return selected color as CSS value."
    },
    "getColorFromValues": {
      "category": "Materials",
      "displayName": "compose color",
      "searchTerms": [
        "compose color",
        "create color",
        "RGB to color",
        "linear RGB",
        "RGBA",
        "color composition",
        "CSS color"
      ],
      "description": "Compose color from linear RGB (or RGBA with alpha input enabled) components and return it as CSS value."
    },
    "generateNormalMap": {
      "category": "Materials",
      "displayName": "generate normal map",
      "searchTerms": [
        "generate normal map",
        "normal map",
        "height map",
        "bump map",
        "normal mapping",
        "height to normal",
        "Sobel",
        "Scharr",
        "invert R",
        "invert G",
        "invert height"
      ],
      "description": "Converts an image to normal map and returns it in Data URL format. Parameters include source image (height map), strength (linear factor), level (exponential factor), blur/sharp (Gaussian filter), filter algorithm (Sobel/Scharr), and inversion options for R/G channels and height interpretation. Compatible with Blender, 3ds Max, and Maya."
    },
    "setMaterialWireframe": {
      "category": "Materials",
      "displayName": "enable/disable wireframe",
      "searchTerms": [
        "enable/disable wireframe",
        "wireframe rendering",
        "wireframe mode",
        "wireframe material",
        "non-photorealistic",
        "debug rendering",
        "performance optimization"
      ],
      "description": "Enable or disable wireframe rendering for a specified material. Can be used as a non-photorealistic rendering technique, for debugging, or performance optimization."
    },
    "playAnimationAdv": {
      "category": "Animation",
      "displayName": "play animation",
      "searchTerms": [
        "play animation",
        "start animation",
        "play clip",
        "animation playback",
        "animation mode",
        "auto mode",
        "frame range",
        "playback speed",
        "reversed playback",
        "when finished do"
      ],
      "description": "Plays an animation clip. Animation clip names correspond to objects to which animation is assigned in Blender, 3ds Max, or Maya (only one animation clip can be assigned per object). Use the animation selector puzzle to provide an animation clip. The drop-down can be used to change the animation mode â€” auto allows for using the animation mode specified in the modelling suite, while other modes override the settings. Use from/to fields for frame range, speed field for playback speed, and reversed checkbox for reversed playback. Also works for a list of animation clips."
    },
    "stopAnimation": {
      "category": "Animation",
      "displayName": "stop animation",
      "searchTerms": [
        "stop animation",
        "halt animation",
        "end animation",
        "reset animation",
        "stop playback",
        "animation stop"
      ],
      "description": "Stops playing back an animation clip and resets its current frame to zero. Also works for a list of animation clips. It won't trigger any puzzles inside the when finished do slot of the play animation puzzle."
    },
    "pauseAnimation": {
      "category": "Animation",
      "displayName": "pause animation",
      "searchTerms": [
        "pause animation",
        "suspend animation",
        "halt playback",
        "freeze animation",
        "pause clip"
      ],
      "description": "Pauses an animation clip playback so that it can be resumed later starting from the frame it was paused on. Also works for a list of animation clips."
    },
    "resumeAnimation": {
      "category": "Animation",
      "displayName": "resume animation",
      "searchTerms": [
        "resume animation",
        "continue animation",
        "unpause animation",
        "restart playback",
        "continue clip"
      ],
      "description": "Resumes a previously paused animation clip. Also works for a list of animation clips."
    },
    "setAnimationFrame": {
      "category": "Animation",
      "displayName": "set animation frame",
      "searchTerms": [
        "set animation frame",
        "set frame",
        "jump to frame",
        "frame position",
        "animation frame",
        "seek frame"
      ],
      "description": "Sets an animation clip to a specified frame. Also works for a list of animation clips."
    },
    "getAnimationFrame": {
      "category": "Animation",
      "displayName": "get animation frame",
      "searchTerms": [
        "get animation frame",
        "current frame",
        "frame position",
        "animation progress",
        "frame number"
      ],
      "description": "Get current frame of an animation clip."
    },
    "isAnimationPlaying": {
      "category": "Animation",
      "displayName": "is animation playing",
      "searchTerms": [
        "is animation playing",
        "check animation",
        "animation status",
        "playing check",
        "animation state",
        "is playing"
      ],
      "description": "Checks if an animation clip (or any of animations in a list) is currently being played back."
    },
    "setAnimationSpeed": {
      "category": "Animation",
      "displayName": "set animation speed",
      "searchTerms": [
        "set animation speed",
        "change speed",
        "playback speed",
        "animation velocity",
        "speed control",
        "reversed speed"
      ],
      "description": "Changes the animation playback speed. Animation doesn't restart on speed changing. The reversed checkbox reverses the animation speed (i.e the speed is multiplied by -1). Also works for a list of animation clips."
    },
    "getAnimationSpeed": {
      "category": "Animation",
      "displayName": "get animation speed",
      "searchTerms": [
        "get animation speed",
        "current speed",
        "playback velocity",
        "speed value",
        "animation rate"
      ],
      "description": "Get the animation playback speed."
    },
    "onAnimationFrameDo": {
      "category": "Animation",
      "displayName": "on animation frame do",
      "searchTerms": [
        "on animation frame do",
        "frame event",
        "animation event",
        "frame callback",
        "animation trigger",
        "frame action"
      ],
      "description": "Execute puzzles specified in the do slot upon animation frame."
    },
    "getAnimations": {
      "category": "Animation",
      "displayName": "get animation of",
      "searchTerms": [
        "get animation of",
        "object animation",
        "animation clip",
        "retrieve animation",
        "animation list",
        "return unique animation id",
        "animation identifier"
      ],
      "description": "Retrieves a specified object's animation clip. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. The return value is always a list of animation clips (even if there is only one of them). Supports return unique animation id for dynamically loaded animations with same names."
    },
    "cloneAnimation": {
      "category": "Animation",
      "displayName": "clone animation",
      "searchTerms": [
        "clone animation",
        "copy animation",
        "duplicate animation",
        "animation copy",
        "animation clone",
        "range clone"
      ],
      "description": "Clones an animation clip (or a list of animations) in the specified range (both inclusive)."
    },
    "animateParam": {
      "category": "Animation",
      "displayName": "animate param",
      "searchTerms": [
        "animate param",
        "parameter animation",
        "tween animation",
        "numeric animation",
        "easing animation",
        "duration animation",
        "repeat animation",
        "yoyo animation",
        "on update do",
        "when finished do"
      ],
      "description": "Animates a numeric parameter (or all parameters in a list or a dictionary) in between from and to, during a period specified with duration (in seconds). The easing dropdown allows you to specify the animation mode. The repeat field specifies the number of repetitions after the first animation is complete. The yoyo checkbox enables backtrack movement (works for repeat > 1). Puzzles in the on update do slot are triggered every rendering frame while the parameter is animated. Puzzles in the when finished do slot are triggered once the animation is finished. This puzzle wraps the Tween.js library, exposing its all 31 easing modes, duration, repeat and yoyo settings, and the update and complete callbacks."
    },
    "animateParamUpdate": {
      "category": "Animation",
      "displayName": "updated value",
      "searchTerms": [
        "updated value",
        "animated value",
        "tween value",
        "current value",
        "animation value",
        "in-between value"
      ],
      "description": "Returns the in-between value produced by the animate param puzzle. Depending on the type of the animated parameter, can be a number, a list or a dictionary. This puzzle may be placed anywhere in a scenario, but naturally works in the on update do slot of the animate param puzzle where it is updated every frame."
    },
    "animateParamStop": {
      "category": "Animation",
      "displayName": "stop animate param",
      "searchTerms": [
        "stop animate param",
        "halt animation",
        "stop tween",
        "end animation",
        "cancel animation"
      ],
      "description": "Stops the animation produced by the animate param puzzle."
    },
    "objConstraintAddLimit": {
      "category": "Animation",
      "displayName": "limit transform",
      "searchTerms": [
        "limit transform",
        "constraint limit",
        "position limit",
        "rotation limit",
        "scale limit",
        "axis limit",
        "distance limit",
        "constraining sphere",
        "min max range"
      ],
      "description": "Creates a constraint to limit object position, rotation or scale along a selected axis. Constraint id should be unique, otherwise an existing constraint with the same id will be replaced. The min and max slots specify the range between which the movement is allowed. The constraint can limit distance between two objects, thus distance slot specifies the distance limit, i.e. the radius of the constraining sphere, equal, max, min modes constrain on surface, inside, outside the sphere."
    },
    "objConstraintAddCopy": {
      "category": "Animation",
      "displayName": "copy transform",
      "searchTerms": [
        "copy transform",
        "constraint copy",
        "copy position",
        "copy rotation",
        "copy scale",
        "copy all transforms",
        "transform constraint"
      ],
      "description": "Creates a constraint to copy object position, rotation, scale or all transforms from another object. Constraint id should be unique, otherwise an existing constraint with the same id will be replaced."
    },
    "objConstraintOperations": {
      "category": "Animation",
      "displayName": "remove / mute / unmute constraint",
      "searchTerms": [
        "remove / mute / unmute constraint",
        "constraint operations",
        "remove constraint",
        "mute constraint",
        "unmute constraint",
        "constraint control",
        "constraint management"
      ],
      "description": "Removes, mutes or unmutes a constraint assigned to a specified object. Other constraints assigned to this object (if any) will remain intact."
    },
    "lookAt": {
      "category": "Cameras/Lights",
      "displayName": "look at",
      "searchTerms": [
        "look at",
        "camera look at",
        "target object",
        "camera targeting",
        "smooth animation",
        "camera animation",
        "focus camera"
      ],
      "description": "Smoothly animates the active camera so that it finally targets a specified object. The numeric parameter specifies the time period over which the animation is performed (in seconds)."
    },
    "tweenCameraExt": {
      "category": "Cameras/Lights",
      "displayName": "tween camera",
      "searchTerms": [
        "tween camera",
        "camera tween",
        "camera animation",
        "camera movement",
        "camera position",
        "camera target",
        "linear interpolation",
        "spherical interpolation",
        "when finished do"
      ],
      "description": "Smoothly animates the active camera so that its position finally changes to the position of a specified object / 3D point, and the camera targets another specified object / 3D point. The position and target parameters can be specified either by scene objects or arrays of X, Y and Z coordinates. The numeric parameter specifies the time period over which the animation is performed (in seconds). The move parameter specifies the interpolation between the starting and ending points: linear or spherical. The optional when finished do slot may be used to detect the moment when the tweening is finished."
    },
    "zoomCameraToObject": {
      "category": "Cameras/Lights",
      "displayName": "zoom camera to object",
      "searchTerms": [
        "zoom camera to object",
        "camera zoom",
        "fit to view",
        "frame object",
        "camera framing",
        "zoom animation",
        "when finished do"
      ],
      "description": "Smoothly zooms the active camera in or out so that the specified object or a group of objects will be properly fit into the camera view. The numeric parameter specifies the time period over which the zooming is performed (in seconds). The optional when finished do slot may be used to detect the moment when the zooming is finished."
    },
    "setActiveCamera": {
      "category": "Cameras/Lights",
      "displayName": "set active camera",
      "searchTerms": [
        "set active camera",
        "change camera",
        "switch camera",
        "camera control",
        "orbit camera",
        "flying camera",
        "no controls",
        "field of view"
      ],
      "description": "Makes a specified camera active. This can be used to change camera control mode ('orbit' vs 'flying' vs 'no controls'), field of view and other settings on the fly."
    },
    "getActiveCamera": {
      "category": "Cameras/Lights",
      "displayName": "active camera",
      "searchTerms": [
        "active camera",
        "get active camera",
        "current camera",
        "retrieve camera",
        "camera object"
      ],
      "description": "Retrieves the active camera."
    },
    "autoRotateCamera": {
      "category": "Cameras/Lights",
      "displayName": "autorotate camera",
      "searchTerms": [
        "autorotate camera",
        "auto rotate",
        "camera rotation",
        "orbit camera",
        "rotate around target",
        "negative speed",
        "reverse rotation"
      ],
      "description": "Smoothly animates the active Orbit camera by rotating it around the target. To rotate camera in reverse direction set negative speed value, e.g -2. Can be used to start rotation after user inactivity and regain control on user interaction."
    },
    "getCameraDirection": {
      "category": "Cameras/Lights",
      "displayName": "get camera direction",
      "searchTerms": [
        "get camera direction",
        "camera direction",
        "world direction",
        "from mouse/touch",
        "ray casting",
        "cursor direction",
        "inverted coordinates",
        "look at cursor"
      ],
      "description": "Returns a list of X, Y and Z components of the active camera's world direction vector. If from mouse/touch is checked, this puzzle casts a ray from the camera to the cursor's screen position and returns the direction of that ray. If additionally inverted is checked, then the cursor's screen position coordinates are negated. Can be used to make objects look at the mouse cursor."
    },
    "setCameraParam": {
      "category": "Cameras/Lights",
      "displayName": "set camera param",
      "searchTerms": [
        "set camera param",
        "camera parameters",
        "field of view",
        "ortho scale",
        "movement speed",
        "rotation speed",
        "allow panning",
        "allow zoom",
        "zoom on ctrl key",
        "keyboard controls",
        "orbit limits",
        "collision detection",
        "clip start",
        "clip end"
      ],
      "description": "Set parameter for the given camera. Parameters include field of view (vertical frustum in degrees), ortho scale (zoom factor), movement/rotation speed, panning/zoom controls, keyboard controls, orbit distance/angle limits, collision detection, and clipping planes (near/far). Also works for a list of cameras, a group (or a list of groups) or with the all objects puzzle."
    },
    "getCameraParam": {
      "category": "Cameras/Lights",
      "displayName": "get camera param",
      "searchTerms": [
        "get camera param",
        "camera parameters",
        "retrieve camera param",
        "camera settings"
      ],
      "description": "Get camera parameter. See description on set camera param puzzle for the list of parameters."
    },
    "setLightParam": {
      "category": "Cameras/Lights",
      "displayName": "set light param",
      "searchTerms": [
        "set light param",
        "light parameters",
        "light color",
        "color vector",
        "CSS color",
        "hex color",
        "light intensity",
        "use shadow",
        "shadow map size",
        "shadow map filtering",
        "basic shadows",
        "bilinear shadows",
        "pcf shadows",
        "esm shadows"
      ],
      "description": "Set light parameter. Color can be set using vector (X,Y,Z as R,G,B), CSS style string (rgb(255,0,0) or magenta), or CSS hex string (#FF0000). Other parameters include intensity, use shadow, shadow map size, and shadow map filtering (basic, bilinear, pcf, esm). Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle."
    },
    "getLightParam": {
      "category": "Cameras/Lights",
      "displayName": "get light param",
      "searchTerms": [
        "get light param",
        "light parameters",
        "retrieve light param",
        "light settings"
      ],
      "description": "Get light parameter. See description on set light param puzzle for the list of parameters."
    },
    "loadScene": {
      "category": "Scenes",
      "displayName": "load scene + percentage",
      "searchTerms": [
        "load scene",
        "load scene + percentage",
        "load gltf",
        "scene loading",
        "when loaded do",
        "on progress do",
        "on error do",
        "scene alias",
        "unload current scene",
        "load new scene"
      ],
      "description": "When triggered, the current scene is unloaded and a new scene is loaded from a specified .gltf file. After loading is finished, the puzzles in the when loaded do slot are triggered. The optional on progress do slot is continuously triggered during loading and can utilize the percentage puzzle. The optional on error do slot triggers in case of load errors. The scene is assigned a name (default equals the scene URL) which can be used to access and manipulate the scene via various object-related puzzles. The alias option allows setting the name manually."
    },
    "appendScene": {
      "category": "Scenes",
      "displayName": "append scene + percentage",
      "searchTerms": [
        "append scene",
        "append scene + percentage",
        "add scene",
        "merge scene",
        "scene appending",
        "when loaded do",
        "on progress do",
        "on error do",
        "scene alias",
        "load without cameras",
        "load without lights"
      ],
      "description": "When triggered, a new scene is loaded from a specified .gltf file and appended to the current scene. After loading is finished, the puzzles in the when loaded do slot are triggered. The optional on progress do slot is continuously triggered during loading and can utilize the percentage puzzle. The append scene puzzle doesn't load cameras and lights from a new scene by default (can be changed in options). Once the scene is appended it's assigned a name (default equals the scene URL) which can be used to access and manipulate the scene via various object-related puzzles. The alias option allows setting the name manually. The optional on error do slot triggers in case of load errors."
    },
    "unloadScene": {
      "category": "Scenes",
      "displayName": "unload scene",
      "searchTerms": [
        "unload scene",
        "remove scene",
        "delete scene",
        "clear scene",
        "unload all scenes",
        "scene cleanup"
      ],
      "description": "Unloads the specified scene or its part from the application. Use the empty text value in order to unload all scenes."
    },
    "isSceneLoaded": {
      "category": "Scenes",
      "displayName": "is scene loaded",
      "searchTerms": [
        "is scene loaded",
        "check scene loaded",
        "scene loaded check",
        "main scene check",
        "scene status"
      ],
      "description": "Checks if the specified scene is loaded. Use the empty text value in order to check the main scene."
    },
    "percentage2": {
      "category": "Scenes",
      "displayName": "percentage",
      "searchTerms": [
        "percentage",
        "loading progress",
        "scene progress",
        "load percentage",
        "progress indicator"
      ],
      "description": "Returns the loading progress percentage for scene loading operations. Used in the on progress do slot during scene loading to track and display loading progress."
    },
    "enableRendering": {
      "category": "Scenes",
      "displayName": "enable rendering",
      "searchTerms": [
        "enable rendering",
        "resume rendering",
        "start rendering",
        "turn on rendering",
        "graphics update"
      ],
      "description": "Resumes previously disabled rendering. Restores graphics updates while maintaining user event capture and animation timeline progression."
    },
    "disableRendering": {
      "category": "Scenes",
      "displayName": "disable rendering",
      "searchTerms": [
        "disable rendering",
        "pause rendering",
        "stop rendering",
        "turn off rendering",
        "save battery",
        "reduce noise",
        "anti-alias"
      ],
      "description": "Disables rendering. The graphics won't be updated but the user events will be captured and animation timelines will progress. Can be used for saving batteries on mobile devices or laptops, and getting rid of cooler noise on desktops. You can also enable the anti-alias option to significantly increase the rendering quality and compensate the loss of performance. This option targets the next frame after the rendering stops."
    },
    "createEnvironment": {
      "category": "Scenes",
      "displayName": "create environment",
      "searchTerms": [
        "create environment",
        "image-based lighting",
        "environment lighting",
        "background scene",
        "environment material",
        "HDR image",
        "color environment",
        "texture environment"
      ],
      "description": "Create a new image-based lighting and assign a background to the scene. This puzzle also creates a new material with the name specified as the first parameter and adds it to the scene. You can use this material to replace textures or colors of the environment. The second parameter can be either 'color' (environment lighting based on default 256Ã—128 HDR image, background based on default grey color) or 'texture' (both environment lighting and background based on default 256Ã—128 HDR image)."
    },
    "batchGeometry": {
      "category": "Scenes",
      "displayName": "batch geometry",
      "searchTerms": [
        "batch geometry",
        "merge geometry",
        "geometry batching",
        "performance optimization",
        "render performance",
        "mesh batching",
        "similar properties",
        "material batching"
      ],
      "description": "Merge geometry of a specified group of meshes to improve rendering performance. Upon execution, the puzzle collects meshes with similar properties (material in use, shadow settings, rendering order, etc), then creates and appends a new batch to the scene. Objects that can't be merged together are left intact. The batch name consists of the material name, 'x' factor representing the number of meshes merged, and '_batch' postfix. Since the batch parts become 'fixed' together (this operation is undoable), make sure you don't batch objects which you plan to move around, animate, or change individually from the batch."
    },
    "exportToGLTF": {
      "category": "Scenes",
      "displayName": "export to gltf",
      "searchTerms": [
        "export to gltf",
        "gltf export",
        "glTF 2.0",
        "export scene",
        "export model",
        "export group",
        "only visible",
        "binary export",
        "GLB format",
        "glTF-compatible materials"
      ],
      "description": "Export your scene, model or a group of models to the glTF 2.0 format. Specify the only visible option to export only visible objects while the binary option is used to export to GLB (glTF Binary) format. For best results we recommend you to have the glTF-compatible materials assigned on the exported models."
    },
    "exportToUSDZ": {
      "category": "Scenes",
      "displayName": "export to usdz",
      "searchTerms": [
        "export to usdz",
        "usdz export",
        "Universal Scene Description",
        "USDZ format",
        "Apple AR",
        "augmented reality",
        "AR preview",
        "glTF-compatible materials"
      ],
      "description": "Export your scene or model to the Universal Scene Description (USDZ) format. By using this puzzle, you can preview your scene on Apple devices in the AR mode. To do that, create the <a> HTML element on your app page and assign the link to the exported USDZ asset as its href parameter. For best results we recommend you to have the glTF-compatible materials assigned on the exported models."
    },
    "raycast": {
      "category": "Scenes",
      "displayName": "raycast",
      "searchTerms": [
        "raycast",
        "ray casting",
        "ray intersection",
        "cast ray",
        "ray direction",
        "intersection point",
        "distance calculation",
        "object detection",
        "collision detection",
        "intersection data",
        "object name",
        "distance",
        "point coordinates",
        "normal vector",
        "UV coordinates"
      ],
      "description": "Cast a ray from the source point (or object) in the given direction and return a list of all intersections (if any). The third parameter is used to reduce a set of the intersected objects. Leave <none> or specify the name of your scene to intersect all objects located in the loaded scene. The returned list contains dictionaries with object name, distance to intersection point, XYZ coordinates of intersection point, normal vector at intersection point, and UV coordinates. The list of intersections is sorted by distance, closest first."
    },
    "addFog": {
      "category": "Scenes",
      "displayName": "add fog",
      "searchTerms": [
        "add fog",
        "distance fog",
        "fog effect",
        "exponential fog",
        "linear fog",
        "fog density",
        "fog near",
        "fog far",
        "outdoor environment",
        "LOD hiding",
        "terrain edges"
      ],
      "description": "Add the distance fog effect to the scene. This effect is typically used in large outdoor environments to enhance visual perception of distance objects, hide objects (LOD), or cover up scene inconsistencies (such as edges of the terrain mesh). Exponential fog is specified using the density value (use zero to disable). Linear fog is specified using the near and far properties (use zero as near and any negative value as far to disable)."
    },
    "setTimeout": {
      "category": "Time",
      "displayName": "after",
      "searchTerms": [
        "after",
        "setTimeout",
        "wait",
        "delay",
        "timeout",
        "trigger after",
        "do after",
        "time delay"
      ],
      "description": "Waits for a specified amount of time and then triggers puzzles placed inside the 'do' slot."
    },
    "setInterval": {
      "category": "Time",
      "displayName": "every",
      "searchTerms": [
        "every",
        "setInterval",
        "interval",
        "repeat",
        "periodic",
        "recurring",
        "timer interval",
        "repeat after"
      ],
      "description": "Waits for a specified amount of time and then triggers puzzles placed inside the 'do' slot. Then repeats."
    },
    "everyFrame": {
      "category": "Time",
      "displayName": "every frame",
      "searchTerms": [
        "every frame",
        "everyFrame",
        "render callback",
        "frame rate",
        "60 fps",
        "continuous update",
        "frame loop",
        "render loop"
      ],
      "description": "Triggers puzzles placed inside the 'do' slot every rendering frame (normally at the rate of 60 frames per second)."
    },
    "elapsed": {
      "category": "Time",
      "displayName": "elapsed delta",
      "searchTerms": [
        "elapsed delta",
        "elapsed",
        "time delta",
        "frame time",
        "delta time",
        "previous frame",
        "frame-independent",
        "animation timing"
      ],
      "description": "Outputs the amount of time (in seconds) passed from the previous rendering frame. Can be used with the 'every frame' puzzle to implement frame-independent animation."
    },
    "elapsedTotal": {
      "category": "Time",
      "displayName": "elapsed total",
      "searchTerms": [
        "elapsed total",
        "elapsedTotal",
        "total time",
        "app start time",
        "application time",
        "procedural animation",
        "visual effects",
        "time from start"
      ],
      "description": "Outputs the amount of time (in seconds) passed from the application start. Can be used with the 'every frame' puzzle to implement procedural animation and various visual effects."
    },
    "setTimer": {
      "category": "Time",
      "displayName": "set timer",
      "searchTerms": [
        "set timer",
        "setTimer",
        "timer",
        "delay trigger",
        "repeat timer",
        "timer ID",
        "cancel timer",
        "override timer"
      ],
      "description": "Triggers puzzles placed inside the 'do' slot after the specified delay. Repeats this action the amount times specified in the 'repeat' slot each after the same delay. The specified ID can be used to override or cancel the timer."
    },
    "removeTimer": {
      "category": "Time",
      "displayName": "remove timer",
      "searchTerms": [
        "remove timer",
        "removeTimer",
        "cancel timer",
        "stop timer",
        "delete timer",
        "timer ID",
        "clear timer"
      ],
      "description": "Removes a previously set timer by using its ID."
    },
    "getDateTime": {
      "category": "Time",
      "displayName": "system date / time",
      "searchTerms": [
        "system date / time",
        "getDateTime",
        "date time",
        "current time",
        "local time",
        "GMT time",
        "UTC time",
        "system clock",
        "current date"
      ],
      "description": "Returns system date and time. Enable the GMT checkbox in order to get time of the UTC/GMT zone instead of the local time zone."
    },
    "addHTMLElement": {
      "category": "HTML",
      "displayName": "add HTML element",
      "searchTerms": [
        "add HTML element",
        "addHTMLElement",
        "create element",
        "HTML element",
        "DOM element",
        "insert element",
        "add to",
        "before",
        "after",
        "in parent doc",
        "iframe"
      ],
      "description": "Creates an HTML element with a specified type and identifier (corresponds to id attribute) and adds it to, right before, or right after the specified existing HTML element. The in parent doc checkbox should be enabled if the created element is located in the parent HTML document (i.e. when app's .html file is embedded using <iframe>). Supported elements include a (hyperlink), b (bold text), br (line break), button (clickable button), canvas (2D/3D graphics), dialog (dialog element), div (container), form (form container), h1-h6 (headings), iframe (inline frame), img (image), input (input field), label (form label), li (list item), link (CSS/favicon), ol (ordered list), p (paragraph), select (dropdown), span (inline container), table (table), tbody (table body), td (table cell), textarea (multiline input), th (table header), thead (table header), tr (table row), ul (unordered list)."
    },
    "removeHTMLElement": {
      "category": "HTML",
      "displayName": "remove HTML element",
      "searchTerms": [
        "remove HTML element",
        "removeHTMLElement",
        "delete element",
        "remove element",
        "delete HTML",
        "remove DOM",
        "element cleanup"
      ],
      "description": "Removes an HTML element from the DOM (Document Object Model). This permanently deletes the element and all its child elements from the web page."
    },
    "setHTMLElemAttribute": {
      "category": "HTML",
      "displayName": "set property",
      "searchTerms": [
        "set property",
        "setHTMLElemAttribute",
        "set attribute",
        "element property",
        "HTML property",
        "DOM property",
        "modify element",
        "change property"
      ],
      "description": "Sets a property (attribute) of an HTML element. Common properties include href (for links), src (for images), textContent (for text), innerHTML (for HTML content), type (for input fields), value (for form elements), style (for CSS styling), class (for CSS classes), id (for element identification), and many others depending on the element type."
    },
    "getHTMLElemAttribute": {
      "category": "HTML",
      "displayName": "get property",
      "searchTerms": [
        "get property",
        "getHTMLElemAttribute",
        "get attribute",
        "element property",
        "HTML property",
        "DOM property",
        "retrieve property",
        "read property"
      ],
      "description": "Gets a property (attribute) value from an HTML element. Returns the current value of the specified property, such as href, src, textContent, innerHTML, type, value, style, class, id, etc."
    },
    "createCSSRule": {
      "category": "HTML",
      "displayName": "create css rule",
      "searchTerms": [
        "create css rule",
        "createCSSRule",
        "CSS rule",
        "style rule",
        "CSS class",
        "style definition",
        "CSS selector"
      ],
      "description": "Creates a new CSS rule that can be applied to HTML elements. CSS rules define styling properties like colors, fonts, layouts, animations, and other visual aspects of web page elements."
    },
    "cssStyleList": {
      "category": "HTML",
      "displayName": "style constructor",
      "searchTerms": [
        "style constructor",
        "cssStyleList",
        "CSS style",
        "style list",
        "CSS properties",
        "style definition",
        "CSS constructor"
      ],
      "description": "Creates a list of CSS style properties that can be applied to HTML elements. This allows for dynamic styling and visual customization of web page elements."
    },
    "setHTMLElemStyle": {
      "category": "HTML",
      "displayName": "set style",
      "searchTerms": [
        "set style",
        "setHTMLElemStyle",
        "CSS style",
        "element style",
        "inline style",
        "visual styling",
        "appearance",
        "CSS properties"
      ],
      "description": "Sets the CSS style properties of an HTML element. This applies inline styling directly to the element, allowing for dynamic visual changes like colors, fonts, sizes, positions, animations, and other visual properties."
    },
    "getHTMLElemStyle": {
      "category": "HTML",
      "displayName": "get style",
      "searchTerms": [
        "get style",
        "getHTMLElemStyle",
        "CSS style",
        "element style",
        "inline style",
        "retrieve style",
        "read style",
        "style properties"
      ],
      "description": "Gets the current CSS style properties of an HTML element. Returns the computed or inline style values for properties like color, font-size, width, height, position, etc."
    },
    "setCSSRuleStyle": {
      "category": "HTML",
      "displayName": "set css rule",
      "searchTerms": [
        "set css rule",
        "setCSSRuleStyle",
        "CSS rule",
        "style rule",
        "CSS class",
        "modify CSS",
        "update style",
        "CSS properties"
      ],
      "description": "Sets the CSS properties of an existing CSS rule. This allows for dynamic modification of CSS classes and style definitions that can be applied to multiple HTML elements."
    },
    "eventHTMLElem": {
      "category": "HTML",
      "displayName": "on event of",
      "searchTerms": [
        "on event of",
        "eventHTMLElem",
        "HTML event",
        "event listener",
        "click event",
        "mouse event",
        "keyboard event",
        "touch event",
        "form event"
      ],
      "description": "Attaches an event listener to an HTML element. Common events include click (mouse click), mouseenter/mouseleave (mouse hover), keydown/keyup (keyboard input), input (form input changes), change (form field changes), submit (form submission), load (element loaded), and many others. The puzzles in the 'do' slot are triggered when the specified event occurs."
    },
    "getEventProperty": {
      "category": "HTML",
      "displayName": "get event property",
      "searchTerms": [
        "get event property",
        "getEventProperty",
        "event property",
        "event data",
        "click coordinates",
        "key code",
        "mouse position",
        "event target",
        "event information"
      ],
      "description": "Gets properties from an HTML event. Common event properties include clientX/clientY (mouse coordinates), keyCode (keyboard key), target (element that triggered the event), type (event type), and many others depending on the event type."
    },
    "DOMObjectSelector": {
      "category": "HTML",
      "displayName": "DOM object selector",
      "searchTerms": [
        "DOM object selector",
        "DOMObjectSelector",
        "HTML selector",
        "element selector",
        "DOM element",
        "element reference",
        "HTML object"
      ],
      "description": "Selects an HTML element from the DOM (Document Object Model). This provides a reference to an existing HTML element that can be used with other HTML puzzles for manipulation, styling, or event handling."
    },
    "querySelector": {
      "category": "HTML",
      "displayName": "query selector",
      "searchTerms": [
        "query selector",
        "querySelector",
        "CSS selector",
        "element query",
        "DOM query",
        "find element",
        "select element",
        "CSS query"
      ],
      "description": "Uses CSS selector syntax to find and select HTML elements from the DOM. Supports various selectors like element types (div, p, button), classes (.classname), IDs (#idname), attributes ([attr=value]), and complex combinations."
    },
    "domObjectCall": {
      "category": "HTML",
      "displayName": "call method",
      "searchTerms": [
        "call method",
        "domObjectCall",
        "DOM method",
        "element method",
        "HTML method",
        "function call",
        "method execution"
      ],
      "description": "Calls a method on an HTML element. Common methods include focus() (set focus), blur() (remove focus), click() (programmatic click), scrollIntoView() (scroll to element), and many others depending on the element type."
    },
    "createCanvasElem": {
      "category": "HTML",
      "displayName": "create canvas elem",
      "searchTerms": [
        "create canvas elem",
        "createCanvasElem",
        "canvas element",
        "2D graphics",
        "3D graphics",
        "drawing canvas",
        "graphics element"
      ],
      "description": "Creates a canvas HTML element used for rendering 2D or 3D graphics. Canvas elements provide a drawing surface for custom graphics, animations, and visual effects."
    },
    "drawLineObjectHTML": {
      "category": "HTML",
      "displayName": "draw line",
      "searchTerms": [
        "draw line",
        "drawLineObjectHTML",
        "canvas line",
        "drawing line",
        "graphics line",
        "2D line",
        "visual line"
      ],
      "description": "Draws a line on a canvas element. This creates a visual line with specified coordinates, color, and thickness for graphics and visual effects."
    },
    "removeLineObjectHTML": {
      "category": "HTML",
      "displayName": "remove line",
      "searchTerms": [
        "remove line",
        "removeLineObjectHTML",
        "delete line",
        "clear line",
        "erase line",
        "remove drawing"
      ],
      "description": "Removes a previously drawn line from a canvas element. This clears the specified line from the drawing surface."
    },
    "bindHTMLObject": {
      "category": "HTML",
      "displayName": "bind element",
      "searchTerms": [
        "bind element",
        "bindHTMLObject",
        "element binding",
        "HTML binding",
        "attach element",
        "link element"
      ],
      "description": "Binds an HTML element to a 3D object or scene element. This creates a connection between HTML elements and 3D objects for interactive applications."
    },
    "unbindHTMLObject": {
      "category": "HTML",
      "displayName": "unbind element",
      "searchTerms": [
        "unbind element",
        "unbindHTMLObject",
        "remove binding",
        "detach element",
        "unlink element",
        "clear binding"
      ],
      "description": "Removes the binding between an HTML element and a 3D object. This disconnects the HTML element from the 3D scene."
    },
    "initFullscreen": {
      "category": "HTML",
      "displayName": "init fullscreen",
      "searchTerms": [
        "init fullscreen",
        "initFullscreen",
        "fullscreen mode",
        "enter fullscreen",
        "full screen",
        "immersive mode"
      ],
      "description": "Initializes fullscreen mode for the application. This allows the 3D application to run in fullscreen mode, providing an immersive experience."
    },
    "openWebPage": {
      "category": "HTML",
      "displayName": "open web page",
      "searchTerms": [
        "open web page",
        "openWebPage",
        "navigate to",
        "go to URL",
        "open link",
        "web navigation",
        "browser navigation"
      ],
      "description": "Opens a web page in the browser. This can navigate to external websites, documentation, or other web resources from within the 3D application."
    },
    "socialShareLink": {
      "category": "HTML",
      "displayName": "social share link",
      "searchTerms": [
        "social share link",
        "socialShareLink",
        "social media",
        "share link",
        "social sharing",
        "share content",
        "social networks"
      ],
      "description": "Creates a link for sharing content on social media platforms. This allows users to share the 3D application or specific content on various social networks."
    },
    "setUrlParam": {
      "category": "HTML",
      "displayName": "set URL param",
      "searchTerms": [
        "set URL param",
        "setUrlParam",
        "URL parameter",
        "web parameter",
        "URL query",
        "web URL",
        "parameter setting"
      ],
      "description": "Sets a parameter in the current web page URL. This allows for dynamic URL manipulation and parameter passing in web applications."
    },
    "getUrlData": {
      "category": "HTML",
      "displayName": "get URL data",
      "searchTerms": [
        "get URL data",
        "getUrlData",
        "URL parameter",
        "web parameter",
        "URL query",
        "read URL",
        "parameter retrieval"
      ],
      "description": "Gets data from the current web page URL. This retrieves URL parameters, query strings, and other URL-based data for use in the application."
    },
    "takeScreenshot": {
      "category": "HTML",
      "displayName": "take screenshot",
      "searchTerms": [
        "take screenshot",
        "takeScreenshot",
        "capture screen",
        "screen capture",
        "save image",
        "capture view",
        "screenshot"
      ],
      "description": "Takes a screenshot of the current 3D scene or application view. This captures the current visual state as an image that can be saved or shared."
    },
    "downloadFile": {
      "category": "HTML",
      "displayName": "download file",
      "searchTerms": [
        "download file",
        "downloadFile",
        "save file",
        "export file",
        "file download",
        "save data",
        "export data"
      ],
      "description": "Downloads a file to the user's device. This can save various types of data including screenshots, exported models, JSON data, text files, and other content generated by the application. The file is automatically converted to the appropriate format and downloaded using the browser's native download mechanism."
    },
    "openFile": {
      "category": "HTML",
      "displayName": "open file",
      "searchTerms": [
        "open file",
        "openFile",
        "file dialog",
        "select file",
        "browse file",
        "file picker",
        "load file"
      ],
      "description": "Invokes the browser's native dialog window for selecting files from the user's device. Once the user has selected a file, returns the file's contents/info by means of the opened file puzzle."
    },
    "openedFile": {
      "category": "HTML",
      "displayName": "opened file",
      "searchTerms": [
        "opened file",
        "openedFile",
        "file contents",
        "file data",
        "file metadata",
        "file name",
        "file size",
        "file type",
        "mime type"
      ],
      "description": "Returns file contents or metadata from a previously opened file. Options include data (file contents in Data URL format), name (file name), extension (file extension), size (file size in bytes), and mime type (file media type). Common MIME types include application/json, image/jpeg, image/png, text/plain, video/mp4, audio/mpeg, and many others."
    },
    "dropFileTo": {
      "category": "HTML",
      "displayName": "drop file to",
      "searchTerms": [
        "drop file to",
        "dropFileTo",
        "file drop",
        "drag and drop",
        "file drag",
        "drop zone",
        "drag over"
      ],
      "description": "Returns a file dragged from a file manager (or other program) and dropped to the given HTML element inside the browser window. Once the user has dropped the file, returns its contents/info by means of the opened file puzzle. You can activate the optional drag over slot to handle file movement events, for example to highlight objects below the cursor/touch."
    },
    "checkVRMode": {
      "category": "AR/VR",
      "displayName": "check VR mode",
      "searchTerms": [
        "check VR mode",
        "checkVRMode",
        "VR system",
        "virtual reality",
        "VR hardware",
        "VR support",
        "if available do",
        "if unavailable do",
        "WebXR"
      ],
      "description": "Checks the virtual reality system. If successful, the puzzles in the if available do are triggered. Otherwise, if the browser does not support VR or VR hardware not found, the puzzles in the if unavailable do slot are triggered. This uses WebXR (eXtended Reality on the Web) technology."
    },
    "enterVRMode": {
      "category": "AR/VR",
      "displayName": "enter VR mode",
      "searchTerms": [
        "enter VR mode",
        "enterVRMode",
        "virtual reality",
        "VR session",
        "on enter do",
        "on exit do",
        "if unavailable do",
        "VR positioning",
        "sitting or standing",
        "looking around",
        "room",
        "walking",
        "viewer locked"
      ],
      "description": "Enters the virtual reality mode. Puzzles placed in the on enter do and on exit do slots are triggered upon entering or exiting the VR mode. Puzzles placed in the if unavailable do are triggered if a VR session could not be established. VR positioning modes include: sitting or standing (immobile camera at height above ground, recommended for Meta Quest, HTC Vive), looking around (immobile camera at zero coordinates), room (mobile camera within bounds), walking (mobile unbounded camera), viewer locked (immobile camera, content parented to view). To properly control the camera in VR mode, snap and parent it to an empty/dummy object positioned in the 3D editor."
    },
    "checkARMode": {
      "category": "AR/VR",
      "displayName": "check AR mode",
      "searchTerms": [
        "check AR mode",
        "checkARMode",
        "augmented reality",
        "AR system",
        "AR hardware",
        "AR support",
        "if available do",
        "else if unavailable do",
        "else if Apple USDZ do",
        "WebXR",
        "Apple AR Quick Look"
      ],
      "description": "Checks the augmented reality system (WebXR). If successful, the puzzles in the if available do slot are triggered. Otherwise, if the browser does not support AR or AR hardware not found, the puzzles in the else if unavailable do slot are triggered. The puzzles in the else if Apple USDZ do slot are triggered when no WebXR-compatible hardware found, but the system supports USDZ-based Apple AR Quick Look technology."
    },
    "enterARMode": {
      "category": "AR/VR",
      "displayName": "enter AR mode",
      "searchTerms": [
        "enter AR mode",
        "enterARMode",
        "augmented reality",
        "AR session",
        "on enter do",
        "on exit do",
        "if unavailable do",
        "allow HTML",
        "AR positioning",
        "looking around",
        "sitting or standing",
        "room",
        "walking",
        "viewer locked"
      ],
      "description": "Enters the augmented reality mode. Puzzles placed in the on enter do and on exit do slots are triggered upon entering or exiting the AR mode. Puzzles placed in the if unavailable do are triggered if a AR session could not be established. Property allow HTML is used to display HTML content in AR mode. AR positioning modes include: looking around (immobile camera at zero coordinates, recommended for typical AR use cases), sitting or standing (immobile camera at height above ground), room (mobile camera within bounds), walking (mobile unbounded camera), viewer locked (immobile camera, content parented to view)."
    },
    "arHitTest": {
      "category": "AR/VR",
      "displayName": "detect surface AR",
      "searchTerms": [
        "detect surface AR",
        "arHitTest",
        "AR surface",
        "ray casting",
        "AR intersection",
        "on intersection do",
        "if missed do",
        "smooth",
        "AR marker",
        "surface detection"
      ],
      "description": "Detect surfaces in AR mode by casting a ray forward. Upon intersection, this ray will trigger puzzles in on intersection do slot. If no intersection occurred or the device is in warming-up state the puzzles triggers if missed do slot. Parameter smooth is used to make AR marker movement smoother. Specify value 0 to disable smoothing, value close to 1 for maximum smoothing."
    },
    "arHitPoint": {
      "category": "AR/VR",
      "displayName": "AR hit point",
      "searchTerms": [
        "AR hit point",
        "arHitPoint",
        "surface point",
        "hit coordinates",
        "AR coordinates",
        "X coordinate",
        "Y coordinate",
        "Z coordinate",
        "XYZ vector"
      ],
      "description": "Surface point coordinate(s) detected by the detect surface AR puzzle. Can be X, Y, Z value, or XYZ vector. Returns the exact coordinates where the AR ray intersects with a detected surface."
    },
    "arHitNormal": {
      "category": "AR/VR",
      "displayName": "AR hit normal",
      "searchTerms": [
        "AR hit normal",
        "arHitNormal",
        "surface normal",
        "hit normal",
        "normal vector",
        "AR normal",
        "X normal",
        "Y normal",
        "Z normal",
        "XYZ vector"
      ],
      "description": "Surface normal vector detected by the detect surface AR puzzle. Can be X, Y, Z value, or XYZ vector. Returns the normal vector at the point where the AR ray intersects with a detected surface."
    },
    "xrCameraControlObject": {
      "category": "AR/VR",
      "displayName": "camera control object",
      "searchTerms": [
        "camera control object",
        "xrCameraControlObject",
        "camera control",
        "AR camera",
        "VR camera",
        "camera offset",
        "set transform",
        "camera movement"
      ],
      "description": "Get camera control object. By offsetting this object (e.g. with the set transform puzzle), you can efficiently move the camera in the AR or VR mode. This spares you from the need to maintain some empty object specifically to parent and snap the camera to, as this object is created or dropped automatically when entering or exiting WebXR."
    },
    "xrSessionEvent": {
      "category": "AR/VR",
      "displayName": "on session event",
      "searchTerms": [
        "on session event",
        "xrSessionEvent",
        "VR session event",
        "WebXR event",
        "VR device",
        "headset event",
        "controller button",
        "select",
        "selectstart",
        "selectend",
        "squeeze",
        "squeezestart",
        "squeezeend",
        "connected",
        "disconnected"
      ],
      "description": "Captures a VR session event generated by a VR device (e.g. a headset or controller button) and triggers puzzles specified in the do slot. Events include: select (pressed and released primary controller button), selectstart (pressed primary controller button), selectend (released primary controller button), squeeze (squeezed and released controller), squeezestart (squeezed controller), squeezeend (unsqueezed controller), connected (VR controller connected), disconnected (VR controller disconnected)."
    },
    "traverseControllers": {
      "category": "AR/VR",
      "displayName": "traverse controllers",
      "searchTerms": [
        "traverse controllers",
        "traverseControllers",
        "VR controllers",
        "loop controllers",
        "connected controllers",
        "controller iteration",
        "controller loop"
      ],
      "description": "Loop over all connected VR controllers, execute puzzles specified in the do slot. This allows you to iterate through all available VR controllers and perform operations on each one."
    },
    "xrControllerProp": {
      "category": "AR/VR",
      "displayName": "get controller property",
      "searchTerms": [
        "get controller property",
        "xrControllerProp",
        "controller property",
        "VR controller",
        "controller object",
        "ray/reticle",
        "handedness",
        "target ray mode",
        "profiles",
        "gamepad index"
      ],
      "description": "Get the controller property. Properties include: object (empty object representing controller), ray/reticle (controller ray or reticle object), handedness (left, right, or none), target ray mode (gaze, tracked-pointer, or screen), profiles (list of controller profile names), gamepad index (controller gamepad index for additional button/axes info)."
    },
    "endVRMode": {
      "category": "AR/VR",
      "displayName": "end AR/VR session",
      "searchTerms": [
        "end AR/VR session",
        "endVRMode",
        "end VR mode",
        "end AR mode",
        "exit VR",
        "exit AR",
        "close session",
        "terminate session"
      ],
      "description": "Ends a virtual reality or augmented reality session. This properly closes the WebXR session and returns the application to normal mode."
    },
    "loadSoundAdv": {
      "category": "Audio/Video",
      "displayName": "load sound",
      "searchTerms": [
        "load sound",
        "loadSoundAdv",
        "audio file",
        "sound file",
        "WebAudio API",
        "HTML audio",
        "sound type",
        "music type",
        "midi type",
        "mp3 format",
        "audio cache",
        "preloading audio",
        "autoplay restrictions"
      ],
      "description": "Loads an audio file using a specified URL. The audio is played via the WebAudio API or HTML <audio> tag depending on the chosen type: sound/midi (WebAudio) or music (HTML audio) respectively. This puzzle also adds the loaded audio to a memory cache so that any subsequent uses with the same URL do not load the same sound file again. Using .mp3 format is recommended as it is supported by most web browsers. Sound type suits better for short audio files and seamless loops, music type for long audio files, and midi type for Standard MIDI files (.mid extension). Due to browser autoplay restrictions, audio should be triggered by user interaction rather than automatic playback."
    },
    "loadVideo": {
      "category": "Audio/Video",
      "displayName": "load video",
      "searchTerms": [
        "load video",
        "loadVideo",
        "video file",
        "HTML video",
        "video element",
        "mp4 format",
        "video cache",
        "video texture",
        "replace texture"
      ],
      "description": "Creates a HTML <video> element and loads a video file using a specified URL. This puzzle also adds the created video element to a memory cache so that any subsequent uses with the same URL do not load the same video file again. Using .mp4 format is recommended as it is supported by most web browsers. The load video puzzle does not create any visible elements on your scene. To make it visible, assign video texture to your materials using the replace texture puzzle."
    },
    "playSound": {
      "category": "Audio/Video",
      "displayName": "play",
      "searchTerms": [
        "play",
        "playSound",
        "audio playback",
        "video playback",
        "start playback",
        "loop playback",
        "browser restrictions",
        "user interaction",
        "automatic playback"
      ],
      "description": "Starts audio or video playback. The loop checkbox repeats playback if enabled. Due to browser restrictions (preventing malicious websites from playing noisy sounds and videos) you should not execute this puzzle to play your assets automatically (upon scene loading). Instead, you should do this in some user-generated event. Use when clicked or on event of to handle such events. There is one exception to this rule. Browsers allow playing muted videos automatically."
    },
    "pauseSound": {
      "category": "Audio/Video",
      "displayName": "pause",
      "searchTerms": [
        "pause",
        "pauseSound",
        "pause audio",
        "pause video",
        "pause playback",
        "stop playback"
      ],
      "description": "Pauses audio or video playback. This temporarily stops the playback while maintaining the current position."
    },
    "stopSound": {
      "category": "Audio/Video",
      "displayName": "stop",
      "searchTerms": [
        "stop",
        "stopSound",
        "stop audio",
        "stop video",
        "stop playback",
        "end playback"
      ],
      "description": "Stops audio or video playback. Using this puzzle is equivalent to using the pause puzzle, followed by the rewind puzzle."
    },
    "rewindSound": {
      "category": "Audio/Video",
      "displayName": "rewind",
      "searchTerms": [
        "rewind",
        "rewindSound",
        "rewind audio",
        "rewind video",
        "play from start",
        "reset playback",
        "beginning"
      ],
      "description": "Makes the audio or video asset to play from the start. This resets the playback position to the beginning of the media file."
    },
    "setPlaybackTime": {
      "category": "Audio/Video",
      "displayName": "set playback time",
      "searchTerms": [
        "set playback time",
        "setPlaybackTime",
        "seek time",
        "jump to time",
        "playback position",
        "time in seconds",
        "WebAudio limitation"
      ],
      "description": "Set audio/video current playback time in seconds. This allows you to seek to a specific position in the media file. Setting playback time is not supported for sound (WebAudio) assets."
    },
    "getPlaybackTime": {
      "category": "Audio/Video",
      "displayName": "get playback time",
      "searchTerms": [
        "get playback time",
        "getPlaybackTime",
        "current time",
        "playback position",
        "time in seconds",
        "WebAudio limitation"
      ],
      "description": "Get audio/video current playback time in seconds. This returns the current position in the media file. Getting playback time is not supported for sound (WebAudio) assets."
    },
    "getDuration": {
      "category": "Audio/Video",
      "displayName": "get duration",
      "searchTerms": [
        "get duration",
        "getDuration",
        "audio duration",
        "video duration",
        "media length",
        "total time",
        "time in seconds"
      ],
      "description": "Get audio/video asset duration in seconds. This returns the total length of the media file."
    },
    "setPlaybackRate": {
      "category": "Audio/Video",
      "displayName": "set playback rate",
      "searchTerms": [
        "set playback rate",
        "setPlaybackRate",
        "playback speed",
        "slow down",
        "speed up",
        "normal speed",
        "midi limitation"
      ],
      "description": "Set audio/video playback rate. Specify value <1 to slow down playback, 1 for normal speed, and >1 to increase playback speed. Setting playback rate is not supported for midi assets."
    },
    "isSoundPlaying": {
      "category": "Audio/Video",
      "displayName": "is playing",
      "searchTerms": [
        "is playing",
        "isSoundPlaying",
        "check playing",
        "audio playing",
        "video playing",
        "playback status",
        "playing state"
      ],
      "description": "Checks if a sound or video is being played back. Returns true if the media is currently playing, false if it's paused or stopped."
    },
    "volume": {
      "category": "Audio/Video",
      "displayName": "set volume",
      "searchTerms": [
        "set volume",
        "volume",
        "audio volume",
        "video volume",
        "sound level",
        "volume control",
        "0.0-1.0 range",
        "embedded audio"
      ],
      "description": "Sets the sound volume. Input volume is clamped to the 0.0-1.0 range. This puzzle also works for videos with embedded audio track."
    },
    "soundVideoMute": {
      "category": "Audio/Video",
      "displayName": "mute",
      "searchTerms": [
        "mute",
        "soundVideoMute",
        "mute audio",
        "mute video",
        "silence",
        "automatic playback",
        "muted videos"
      ],
      "description": "Mute a sound or video. Apart from controlling audio volume, you can use this puzzle to start video playback automatically. This is possible, because web browsers allow playing muted videos without user interaction."
    },
    "soundVideoUnmute": {
      "category": "Audio/Video",
      "displayName": "unmute",
      "searchTerms": [
        "unmute",
        "soundVideoUnmute",
        "unmute audio",
        "unmute video",
        "restore sound",
        "enable audio"
      ],
      "description": "Unmute a sound or video. This restores the audio playback for previously muted media."
    },
    "soundPositionalSpeaker": {
      "category": "Audio/Video",
      "displayName": "positional speaker",
      "searchTerms": [
        "positional speaker",
        "soundPositionalSpeaker",
        "3D audio",
        "spatial audio",
        "positional audio",
        "attach audio",
        "3D object",
        "rolloff from",
        "factor"
      ],
      "description": "Make an audio positional by attaching it to some 3D object. Both sound and music audio assets can be turned to positional speakers. To fine-tune the 3D audio effect you can use the rolloff from â€“ the distance from which the sound intensity starts to decrease, and the factor â€“ the rate of this decreasing."
    },
    "synthSound": {
      "category": "Audio/Video",
      "displayName": "synth sound",
      "searchTerms": [
        "synth sound",
        "synthSound",
        "MIDI synthesizer",
        "General MIDI",
        "TinySynth",
        "software synthesizer",
        "note on",
        "note off",
        "set instrument",
        "set volume",
        "set pan",
        "stop sounds",
        "drums"
      ],
      "description": "Play sound using the built-in General MIDI-compatible software synthesizer (based on the TinySynth library). Various instruments and effects supported. Features include: note on (start playing note with velocity 0-127), note off (stop playing note), set instrument (set channel instrument), set volume (set channel volume), set pan (set channel pan level), stop sounds (stop all sounds on channel). To play drums, specify Drums as channel number and use the drum number to select instrument."
    },
    "getNoteNumber": {
      "category": "Audio/Video",
      "displayName": "note number",
      "searchTerms": [
        "note number",
        "getNoteNumber",
        "MIDI note",
        "pitch notation",
        "scientific pitch",
        "C 4",
        "middle C",
        "octave"
      ],
      "description": "Return note number. Use it to pass notes to the 1-9 channel of the synth sound puzzle. Octave numbers are specified using the scientific pitch notation, for example C 4 means middle C tone."
    },
    "getDrumNumber": {
      "category": "Audio/Video",
      "displayName": "drum number",
      "searchTerms": [
        "drum number",
        "getDrumNumber",
        "MIDI drum",
        "drum notes",
        "drum instrument",
        "Drums channel"
      ],
      "description": "Return drum number. Use it to pass notes to the Drums channel of the synth sound puzzle."
    },
    "createPhysicsWorld": {
      "category": "Physics",
      "displayName": "create physics world",
      "searchTerms": [
        "create physics world",
        "createPhysicsWorld",
        "physics engine",
        "gravity",
        "frames per second",
        "fps",
        "Earth gravity",
        "no gravity",
        "soft body simulation",
        "collision detection",
        "synchronization"
      ],
      "description": "Initializes the physics engine using the specified gravity and frames-per-second parameters. The default gravity value of 9.8 corresponds to Earth surface conditions. Zero value means no gravity as in space. The higher fps value the better simulation quality at the expense of performance. The soft body checker activates the soft body simulation capability. Under the hood, this puzzle also enables collision detection and automatic synchronization with graphics."
    },
    "createPhysicsBody": {
      "category": "Physics",
      "displayName": "create rigid body",
      "searchTerms": [
        "create rigid body",
        "createPhysicsBody",
        "physics body",
        "dynamic body",
        "kinematic body",
        "static body",
        "ghost body",
        "collision shape",
        "mass",
        "box shape",
        "sphere shape",
        "mesh shape",
        "capsule shape",
        "cone shape",
        "cylinder shape",
        "empty shape",
        "constraint attachments",
        "anchor points"
      ],
      "description": "Creates a physics body from a specified object, of dynamic, kinematic, static, or ghost type. Assigns the collision shape and sets the mass for the body (valid for dynamic bodies only). Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. Body types: dynamic (moved by physics engine, influenced by collisions), kinematic (moved by animation or user action), static (cannot move but collide), ghost (similar to kinematic but no collision response). Supported shapes: box, sphere, mesh, capsule, cone, cylinder, empty. For performance, prioritize primitive shapes over mesh shapes."
    },
    "createSoftBody": {
      "category": "Physics",
      "displayName": "create soft body",
      "searchTerms": [
        "create soft body",
        "createSoftBody",
        "soft body",
        "total mass",
        "pressure params",
        "volume shape",
        "rope shape",
        "patch shape",
        "closed pressurized volume",
        "line object",
        "cloth",
        "textile patch",
        "soft body simulation"
      ],
      "description": "Creates a soft body from a specified object with a given total mass and optional pressure params. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. Supported soft body shapes: volume (a closed pressurized 3D-dimensional volume), rope (a line object which behaves like a rope), patch (a polygonal surface like cloth or textile patch). Don't forget to activate soft body simulation on the physics world before creating soft bodies."
    },
    "removePhysicsBody": {
      "category": "Physics",
      "displayName": "remove physics body",
      "searchTerms": [
        "remove physics body",
        "removePhysicsBody",
        "destroy physics body",
        "remove physics",
        "delete physics body"
      ],
      "description": "Removes physics from a specified object by destroying the physics body associated with it. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle."
    },
    "physicsBodyApplyParam": {
      "category": "Physics",
      "displayName": "apply body param",
      "searchTerms": [
        "apply body param",
        "physicsBodyApplyParam",
        "physics parameters",
        "angular damping",
        "angular factor",
        "angular velocity",
        "ccd motion threshold",
        "ccd swept sphere radius",
        "force",
        "friction",
        "gravity",
        "impulse",
        "linear damping",
        "linear factor",
        "linear velocity",
        "margin",
        "position",
        "restitution",
        "rotation",
        "stiffness",
        "torque",
        "torque impulse"
      ],
      "description": "Sets parameters for the physics body associated with a specified object. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. Parameters include: angular damping (resistance to rotation), angular factor (rotational degrees of freedom), angular velocity (rotation speed), ccd motion threshold (continuous collision detection), ccd swept sphere radius (collision detection radius), force (push in direction), friction (resistance to sliding), gravity (individual body gravity), impulse (velocity with mass consideration), linear damping (resistance to movement), linear factor (positional degrees of freedom), linear velocity (movement speed), margin (collision margin for mesh/cone), position (body position), restitution (elasticity coefficient), rotation (body rotation), stiffness (soft body stiffness), torque (spin direction), torque impulse (angular velocity with mass consideration)."
    },
    "physicsBodyGetParam": {
      "category": "Physics",
      "displayName": "get body param",
      "searchTerms": [
        "get body param",
        "physicsBodyGetParam",
        "get physics parameter",
        "retrieve body param",
        "physics body parameter"
      ],
      "description": "Gets a parameter from the physics body associated with a specified object. This allows you to retrieve current values of physics parameters like position, velocity, mass, etc. from the physics body."
    },
    "setBodyState": {
      "category": "Physics",
      "displayName": "set body state",
      "searchTerms": [
        "set body state",
        "setBodyState",
        "activate body",
        "sleep body",
        "enable simulation",
        "disable simulation",
        "reset body",
        "enable contact response",
        "disable contact response",
        "make dynamic",
        "make kinematic",
        "make static",
        "enable deactivation",
        "disable deactivation"
      ],
      "description": "Change the state to the physics body associated with a specified object. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. Parameters: activate (activate sleeping physics body), sleep (force sleeping state), enable simulation (enable body simulation), disable simulation (disable body simulation), reset (clear all forces and velocities), enable contact response (allow body to collide), disable contact response (disable body colliding), make dynamic (make body dynamic), make kinematic (make body kinematic), make static (make body static), enable deactivation (allow body to sleep), disable deactivation (disable body sleeping)."
    },
    "onSimulationTick": {
      "category": "Physics",
      "displayName": "on simulation tick",
      "searchTerms": [
        "on simulation tick",
        "onSimulationTick",
        "physics simulation tick",
        "before simulation",
        "after simulation",
        "physics frame",
        "simulation timing"
      ],
      "description": "Trigger puzzles specified in the do slot just before or just after the physics simulation tick. Physics simulation tick corresponds to the FPS value specified when creating physics world and does not coincide with rendering frame. As such, we recommend that you apply forces/velocities/impulses before simulation tick and detect collisions between your bodies after simulation tick. This way you can achieve more stable and realistic simulations."
    },
    "snapBody": {
      "category": "Physics",
      "displayName": "snap body",
      "searchTerms": [
        "snap body",
        "snapBody",
        "move physics body",
        "copy transform",
        "body position",
        "body rotation",
        "physics synchronization"
      ],
      "description": "Moves a physics body associated with a specified object, and the object itself, to the position of another object by copying its transform data. Also copies rotation. Does not work with lists, groups or the all objects puzzle. Works similar to apply body param / position puzzle."
    },
    "addPhysicsConstraint": {
      "category": "Physics",
      "displayName": "add constraint to",
      "searchTerms": [
        "add constraint to",
        "addPhysicsConstraint",
        "physics constraint",
        "connect bodies",
        "hinge constraint",
        "ball constraint",
        "slider constraint",
        "spring constraint",
        "fixed constraint",
        "physical joint"
      ],
      "description": "Connect two physics bodies by a constraint of the given type. Constraint types: hinge (connect bodies by shared axis), ball (connect bodies by ball-shaped socket), slider (limit movement along X axis), spring (connect bodies by spring-like joint), fixed (connect bodies tightly)."
    },
    "removePhysicsConstraint": {
      "category": "Physics",
      "displayName": "remove constraint from",
      "searchTerms": [
        "remove constraint from",
        "removePhysicsConstraint",
        "remove physics constraint",
        "delete constraint",
        "disconnect bodies"
      ],
      "description": "Remove physics constraint. This disconnects two physics bodies that were previously connected by a constraint."
    },
    "softBodyAnchor": {
      "category": "Physics",
      "displayName": "anchor soft body",
      "searchTerms": [
        "anchor soft body",
        "softBodyAnchor",
        "soft body anchor",
        "anchor point",
        "rigid body attachment",
        "soft body connection"
      ],
      "description": "Anchor soft body to a given rigid body at the point in space represented by the given vector. This creates a connection between a soft body and a rigid body at a specific point."
    },
    "softBodyApplyParam": {
      "category": "Physics",
      "displayName": "apply soft body param",
      "searchTerms": [
        "apply soft body param",
        "softBodyApplyParam",
        "soft body parameters",
        "anchor hardness",
        "angular stiffness",
        "collision flags",
        "damping coefficient",
        "drag coefficient",
        "dynamic friction",
        "lift coefficient",
        "linear stiffness",
        "position iterations",
        "pressure coefficient",
        "velocity iterations",
        "wind velocity"
      ],
      "description": "Sets parameters for the soft body associated with a specified object. Also works for a list of objects, a group (or a list of groups) or with the all objects puzzle. Parameters: anchor hardness (0-1 anchor influence), angular stiffness (0-1 angular stiffness), collision flags (0/1/17 collision types), damping coefficient (0-1 damping), drag coefficient (fluid resistance), dynamic friction (0-1 friction), lift coefficient (lift force), linear stiffness (0-1 linear stiffness), position iterations (solver quality), pressure coefficient (balloon pressure), velocity iterations (solver quality), wind velocity (wind vector)."
    },
    "softBodyGetParam": {
      "category": "Physics",
      "displayName": "get soft body param",
      "searchTerms": [
        "get soft body param",
        "softBodyGetParam",
        "get soft body parameter",
        "retrieve soft body param"
      ],
      "description": "Gets a parameter from the soft body associated with a specified object. This allows you to retrieve current values of soft body parameters like stiffness, damping, pressure, etc."
    },
    "detectCollision": {
      "category": "Physics",
      "displayName": "detect collisions",
      "searchTerms": [
        "detect collisions",
        "detectCollision",
        "collision detection",
        "if touching",
        "if not touching",
        "collision callback",
        "rendering frame"
      ],
      "description": "Detects if there is a collision at the moment of a specified body with another body (or any body from a list or a group). If there is a collision, the puzzles in the if touching do slot are triggered, otherwise - in the if not touching do. The detect collisions puzzle triggers either of its callback slots every rendering frame."
    },
    "collisionInfo": {
      "category": "Physics",
      "displayName": "collision info",
      "searchTerms": [
        "collision info",
        "collisionInfo",
        "collision information",
        "objectA",
        "objectB",
        "distance",
        "positionOnA",
        "positionOnB",
        "normalOnB",
        "collision point",
        "normal vector"
      ],
      "description": "Outputs a dictionary with collision information: objectA (name of first colliding body), objectB (name of second colliding body), distance (distance between collision points), positionOnA (XYZ coordinates of collision point on first object), positionOnB (XYZ coordinates of collision point on second object), normalOnB (XYZ components of normal vector at collision point on second object)."
    },
    "afterimage": {
      "category": "Post-processing",
      "displayName": "afterimage",
      "searchTerms": [
        "afterimage",
        "motion blur",
        "image smearing",
        "level",
        "blur effect",
        "motion effect"
      ],
      "description": "Enable or change parameters of the afterimage (motion blur) effect. This creates a motion blur effect that smears moving objects across the frame. Parameters: level (image smearing factor). The effect simulates the blur that occurs when objects move during camera exposure time."
    },
    "bloom": {
      "category": "Post-processing",
      "displayName": "bloom",
      "searchTerms": [
        "bloom",
        "bloom effect",
        "light bloom",
        "glow effect",
        "threshold",
        "strength",
        "radius",
        "lighting intensity",
        "blur radius"
      ],
      "description": "Enable or change parameters of the bloom effect. This creates a glow effect around bright areas of the scene, simulating how bright light sources appear to bleed into surrounding areas. Parameters: threshold (minimum lighting intensity to render the bloom effect), strength (bloom intensity), radius (bloom blur radius)."
    },
    "brightnessContrast": {
      "category": "Post-processing",
      "displayName": "brightness/contrast",
      "searchTerms": [
        "brightness/contrast",
        "brightnessContrast",
        "image brightness",
        "image contrast",
        "brightness factor",
        "contrast factor",
        "image adjustment",
        "color correction"
      ],
      "description": "Allows for tweaking brightness and contrast of the rendering. This post-processing effect adjusts the overall brightness and contrast of the final rendered image. Parameters: brightness (image brightness factor), contrast (image contrast factor). Useful for fine-tuning the visual appearance of your scene."
    },
    "dof": {
      "category": "Post-processing",
      "displayName": "depth of field",
      "searchTerms": [
        "depth of field",
        "dof",
        "focus distance",
        "camera aperture",
        "blur radius",
        "depth leak threshold",
        "bokeh effect",
        "camera focus",
        "background blur"
      ],
      "description": "Enable or change parameters of the depth of field (DOF) effect. This simulates the camera focus effect where objects at the focus distance are sharp while objects closer or farther appear blurred. Parameters: focus (DOF focus distance), aperture (camera aperture factor), maxblur (DOF blur radius), depth leak threshold (threshold to eliminate DOF distance artifacts)."
    },
    "grayscale": {
      "category": "Post-processing",
      "displayName": "grayscale",
      "searchTerms": [
        "grayscale",
        "black and white",
        "monochrome",
        "desaturate",
        "remove color",
        "grayscale effect"
      ],
      "description": "Enables the grayscale effect. This converts the entire rendered scene to grayscale (black and white), removing all color information. Useful for creating dramatic or artistic effects, or for simulating old photographs or film noir aesthetics."
    },
    "refraction": {
      "category": "Post-processing",
      "displayName": "simple refraction",
      "searchTerms": [
        "simple refraction",
        "refraction",
        "refraction effect",
        "material refraction",
        "distance",
        "render after refraction",
        "light bending",
        "transparent material"
      ],
      "description": "Enables an easy refraction effect for a specified material. This simulates how light bends when passing through transparent materials like glass or water. Parameters: material (material used to assign the effect to), distance (maximum length of the refracted ray), render after refraction (object(s) to be excluded from the normal rendering queue and to be rendered after the refraction effect is applied)."
    },
    "ssr": {
      "category": "Post-processing",
      "displayName": "screen space reflection/refraction",
      "searchTerms": [
        "screen space reflection/refraction",
        "ssr",
        "screen space reflection",
        "screen space refraction",
        "for material",
        "steps",
        "stride",
        "binary search steps",
        "thickness",
        "max distance",
        "resolution",
        "jitter",
        "render after",
        "reflection quality",
        "refraction quality"
      ],
      "description": "Enables screen space reflection/refraction (SSR) effect. This creates realistic reflections and refractions based on the screen space depth buffer, allowing materials to reflect and refract the scene around them. Parameters: for material (material used to assign the effect to), steps (number of depth search steps along the reflected/refracted ray), stride (stride of search steps in pixels), binary search steps (number of binary search iterations), thickness (factor to eliminate SSR artifacts for refraction), max distance (maximum length of the reflected/refracted ray), resolution (resolution multiplier for the depth buffer), jitter (noise factor to improve depth search), render after (objects to be rendered after SSR applied)."
    },
    "removePostprocessing": {
      "category": "Post-processing",
      "displayName": "remove post-effects",
      "searchTerms": [
        "remove post-effects",
        "removePostprocessing",
        "remove post processing",
        "clear post effects",
        "disable post effects",
        "reset post effects"
      ],
      "description": "Removes post-processing effects. The puzzles mode removes all effects except outline and ambient occlusion, which is assigned in the modelling suite. This allows you to reset or clear all active post-processing effects from the scene."
    },
    "controls_if": {
      "category": "Logic",
      "displayName": "if",
      "searchTerms": [
        "if",
        "controls_if",
        "if statement",
        "conditional",
        "branching",
        "control flow",
        "condition"
      ],
      "description": "Implements branching (control flow) in your puzzles. This allows you to perform different actions based on whether a condition is met. You can expand the if puzzle by clicking on the gear icon and dragging out more slots: elseif or else. This enables complex conditional logic with multiple branches."
    },
    "controls_ifelse": {
      "category": "Logic",
      "displayName": "if / else",
      "searchTerms": [
        "if / else",
        "controls_ifelse",
        "if else",
        "conditional",
        "branching",
        "control flow",
        "condition",
        "alternative"
      ],
      "description": "Implements branching (control flow) in your puzzles with an else clause. This allows you to perform different actions based on whether a condition is met, with a default action when the condition is false. You can expand this puzzle by clicking on the gear icon and dragging out more slots: elseif or else for complex conditional logic."
    },
    "logic_compare": {
      "category": "Logic",
      "displayName": "comparison",
      "searchTerms": [
        "comparison",
        "logic_compare",
        "compare",
        "equal",
        "not equal",
        "greater than",
        "less than",
        "greater than or equal",
        "less than or equal",
        "compare values",
        "logical value"
      ],
      "description": "Compares two values and outputs a logical value (true or false) as the result of comparison. Supports various comparison operators: equal, not equal, greater than, less than, greater than or equal, less than or equal. The result can be used with if/else puzzles or other logical operations."
    },
    "logic_operation": {
      "category": "Logic",
      "displayName": "logical operators AND / OR",
      "searchTerms": [
        "logical operators AND / OR",
        "logic_operation",
        "AND",
        "OR",
        "logical AND",
        "logical OR",
        "boolean operator",
        "logical expression",
        "combine conditions"
      ],
      "description": "Combines logical expressions using AND / OR operators. AND returns true only if both conditions are true. OR returns true if at least one condition is true. This allows you to create complex conditional expressions by combining multiple comparisons or logical values."
    },
    "logic_negate": {
      "category": "Logic",
      "displayName": "logical operator NOT",
      "searchTerms": [
        "logical operator NOT",
        "logic_negate",
        "NOT",
        "negate",
        "invert",
        "logical NOT",
        "boolean negation",
        "reverse condition"
      ],
      "description": "Negates the result of a logical expression (converts true to false and false to true). This allows you to invert the meaning of any condition or logical expression. Useful for creating opposite conditions or checking for the absence of something."
    },
    "logic_boolean": {
      "category": "Logic",
      "displayName": "true / false",
      "searchTerms": [
        "true / false",
        "logic_boolean",
        "true",
        "false",
        "boolean",
        "boolean value",
        "logical value"
      ],
      "description": "Represents the two fundamental logical values: true and false (Boolean values). These values are returned as output by the comparison puzzle, as well as by the logical operators AND / OR and NOT, and supplied as inputs to the branching puzzles if / else and test."
    },
    "logic_null": {
      "category": "Logic",
      "displayName": "null",
      "searchTerms": [
        "null",
        "logic_null",
        "uninitialized",
        "undefined",
        "empty value",
        "no value",
        "unset"
      ],
      "description": "Represents the null value, which means a variable is not set to true or false, but rather left undecided. You can use null to explicitly initialize a newly created variable or to represent the absence of a value. Useful for checking if a variable has been set or for representing empty states."
    },
    "logic_ternary": {
      "category": "Logic",
      "displayName": "test",
      "searchTerms": [
        "test",
        "logic_ternary",
        "ternary operator",
        "conditional value",
        "if then else",
        "compact condition",
        "inline condition"
      ],
      "description": "Returns a value based on a condition (ternary operator). This allows you to make your puzzles more compact or more convenient to use by returning a value right away based on whether a condition is true or false. Useful for setting variables or values conditionally in a single block."
    },
    "controls_repeat_ext": {
      "category": "Loops",
      "displayName": "repeat",
      "searchTerms": [
        "repeat",
        "controls_repeat_ext",
        "loop",
        "iteration",
        "repeat times",
        "counter loop",
        "finite loop"
      ],
      "description": "Runs the puzzles placed in the do slot the specified number of times. This creates a finite loop that executes a set of actions a predetermined number of times. Useful for creating multiple copies of objects, performing batch operations, or executing actions a specific number of times. Be careful to avoid creating infinite loops that could hang your browser."
    },
    "controls_forEach": {
      "category": "Loops",
      "displayName": "for each in list",
      "searchTerms": [
        "for each in list",
        "controls_forEach",
        "foreach",
        "iterate list",
        "list iteration",
        "array loop",
        "list processing"
      ],
      "description": "Iterates through a specified list and runs the puzzles placed in the do slot for each item in that list. The items for corresponding iteration are accessible via an automatically created variable. Useful for processing all items in a list, such as adding annotations to all objects, applying effects to multiple items, or performing operations on each element of a collection."
    },
    "forEachInDict": {
      "category": "Loops",
      "displayName": "for each in dict",
      "searchTerms": [
        "for each in dict",
        "forEachInDict",
        "dictionary iteration",
        "dict loop",
        "key value pairs",
        "dictionary processing",
        "object iteration"
      ],
      "description": "Iterates through a specified dictionary and runs the puzzles placed in the do slot for each item in that dictionary. The items for corresponding iteration are accessible via automatically created key/value variables. Useful for processing all key-value pairs in a dictionary, such as printing stored data, processing configuration settings, or iterating through object properties."
    },
    "controls_for": {
      "category": "Loops",
      "displayName": "count with",
      "searchTerms": [
        "count with",
        "controls_for",
        "counter loop",
        "numeric sequence",
        "step loop",
        "range loop",
        "number iteration"
      ],
      "description": "Similar to for each, except it gives the loop variable values in a numeric sequence. This creates a counter loop that iterates through a range of numbers with a specified step. Useful for creating numbered sequences, positioning objects along axes, or performing operations with numeric indices. The loop variable contains the current number in the sequence."
    },
    "controls_whileUntil": {
      "category": "Loops",
      "displayName": "repeat while / until",
      "searchTerms": [
        "repeat while / until",
        "controls_whileUntil",
        "while loop",
        "until loop",
        "conditional loop",
        "repeat while",
        "repeat until",
        "conditional iteration"
      ],
      "description": "The repeat while puzzle runs the puzzles placed in the do slot as long as a specified logical condition is true. The repeat until puzzle stops running just after a specified logical condition evaluates to false. Well suited for situations when something is changing inside the loop and this affects your decision to continue or stop performing the iterations. Be very careful to avoid infinite loops that could hang your browser."
    },
    "controls_flow_statements": {
      "category": "Loops",
      "displayName": "break / continue",
      "searchTerms": [
        "break / continue",
        "controls_flow_statements",
        "break",
        "continue",
        "loop control",
        "early exit",
        "skip iteration",
        "loop flow"
      ],
      "description": "Provides additional means for controlling loop behavior. The break variant provides an early exit from the loop when a condition is met. The continue variant skips the current iteration and begins the next iteration. Can be used with any type of loop (repeat, for each, count with, while/until). Useful for searching through collections (break when found) or filtering operations (continue to skip certain items)."
    },
    "text": {
      "category": "Text",
      "displayName": "text",
      "searchTerms": [
        "text",
        "string",
        "character",
        "word",
        "line",
        "text value",
        "string value"
      ],
      "description": "This universally used puzzle provides the means to supply some text (a character, word or line) to your Puzzles scenario. Often used with puzzles from different categories. You can specify URL inputs to scene loader puzzles, HTML element ids, CSS rules and colors to HTML puzzles, and ids and URLs to other puzzles. Can also be used to provide names for objects, materials, animations or groups instead of selector puzzles, useful for dynamically loaded content."
    },
    "textMultiline": {
      "category": "Text",
      "displayName": "text multi-line",
      "searchTerms": [
        "text multi-line",
        "textMultiline",
        "multiline text",
        "multi line text",
        "ace editor",
        "code editor",
        "css highlighting",
        "html highlighting",
        "javascript highlighting",
        "plain text"
      ],
      "description": "Provides the means to supply multi-line text to your Puzzles scenario. Uses Ace Editor for displaying and editing content with support for CSS, HTML, Javascript and plain text highlighting modes. The puzzle can be resized to change the editor's width and height. Includes keyboard shortcuts for efficient editing."
    },
    "text_join": {
      "category": "Text",
      "displayName": "create text",
      "searchTerms": [
        "create text",
        "text_join",
        "concatenate",
        "join text",
        "combine text",
        "text concatenation",
        "string concatenation"
      ],
      "description": "Allows you to combine (concatenate) 2 or more pieces of text into a single line. If you provide non-textual values such as numbers, they will be automatically converted to text. Additional inputs are added by dragging an item block from the gray toolbox on the left into the join block. Useful for creating dynamic text compositions."
    },
    "text_append": {
      "category": "Text",
      "displayName": "append text",
      "searchTerms": [
        "append text",
        "text_append",
        "add text",
        "append to variable",
        "add to string",
        "text addition"
      ],
      "description": "Adds the given text to the specified variable. This modifies the variable by appending new text to its existing content. Useful for building text dynamically, such as creating annotations composed of some text and object names, or accumulating text content over time."
    },
    "text_replace": {
      "category": "Text",
      "displayName": "replace",
      "searchTerms": [
        "replace",
        "text_replace",
        "find and replace",
        "text replacement",
        "string replacement",
        "case sensitive",
        "search and replace"
      ],
      "description": "Searches for the given piece of text and replaces it with the specified piece of text wherever it finds it (case-sensitive). This performs a global find and replace operation on the entire text string. Useful for text processing, data cleaning, or dynamic content modification."
    },
    "text_reverse": {
      "category": "Text",
      "displayName": "reverse",
      "searchTerms": [
        "reverse",
        "text_reverse",
        "reverse text",
        "string reverse",
        "backwards text",
        "mirror text"
      ],
      "description": "Reverses the given piece of text. This flips the order of all characters in the text string, making the last character first and the first character last. Useful for creating mirror effects, palindrome checking, or creative text transformations."
    },
    "text_length": {
      "category": "Text",
      "displayName": "length",
      "searchTerms": [
        "length",
        "text_length",
        "string length",
        "character count",
        "text size",
        "string size",
        "count characters"
      ],
      "description": "Counts the number of characters in the specified text. Returns the total length of the text string, including spaces and special characters. Useful for text validation, input checking, or determining if text meets length requirements."
    },
    "text_isEmpty": {
      "category": "Text",
      "displayName": "is empty",
      "searchTerms": [
        "is empty",
        "text_isEmpty",
        "empty text",
        "check empty",
        "string empty",
        "zero length",
        "null text"
      ],
      "description": "Checks whether the given text is empty (has length 0). The result is true if the text is empty and false if not. Useful for input validation, checking if variables have been set, or determining if user input has been provided. For use with Logic puzzles."
    },
    "text_indexOf": {
      "category": "Text",
      "displayName": "find",
      "searchTerms": [
        "find",
        "text_indexOf",
        "search text",
        "find substring",
        "text search",
        "string search",
        "position",
        "index"
      ],
      "description": "Checks whether a piece of text is in another piece of text and, if so, where it appears. If the text was found, it returns its position (characters in text are indexed starting from 0). If the text was not found, the puzzle returns -1. Useful for text searching, validation, or parsing operations."
    },
    "text_charAt": {
      "category": "Text",
      "displayName": "get letter",
      "searchTerms": [
        "get letter",
        "text_charAt",
        "get character",
        "extract character",
        "char at position",
        "get char",
        "character at index"
      ],
      "description": "Extracts the character from the specified position (characters in text are indexed starting from 0). Returns a single character from the text string at the given index position. Useful for character-by-character text processing, parsing, or accessing specific positions in text."
    },
    "text_getSubstring": {
      "category": "Text",
      "displayName": "get region",
      "searchTerms": [
        "get region",
        "text_getSubstring",
        "substring",
        "extract text",
        "get text region",
        "slice text",
        "text slice",
        "extract substring"
      ],
      "description": "Allows a region of text between two specified positions to be extracted (characters in text are indexed starting from 0). Returns a portion of the text string from the start position to the end position. Useful for parsing text, extracting specific parts of strings, or text manipulation."
    },
    "text_changeCase": {
      "category": "Text",
      "displayName": "adjust case",
      "searchTerms": [
        "adjust case",
        "text_changeCase",
        "change case",
        "uppercase",
        "lowercase",
        "title case",
        "text case",
        "case conversion"
      ],
      "description": "Creates a version of the input text that is either UPPER CASE (all letters upper-case), lower case or Title Case (first letters upper-case, other letters lower-case). Non-alphabetic characters, and text in languages without case, such as Chinese, are not affected. Useful for text formatting, data normalization, or user interface consistency."
    },
    "text_trim": {
      "category": "Text",
      "displayName": "trim spaces",
      "searchTerms": [
        "trim spaces",
        "text_trim",
        "remove spaces",
        "trim text",
        "remove whitespace",
        "clean text",
        "strip spaces"
      ],
      "description": "Can remove space characters from the beginning of the text, from the end of the text or from both sides of the text. This cleans up text by removing unwanted whitespace. Useful for data cleaning, input validation, or preparing text for processing."
    },
    "text_count": {
      "category": "Text",
      "displayName": "count",
      "searchTerms": [
        "count",
        "text_count",
        "count occurrences",
        "count text",
        "count substring",
        "frequency",
        "how many times"
      ],
      "description": "Counts how many times a piece of text appears in the specified text. Returns the number of occurrences of the search text within the target text. Useful for text analysis, data processing, or determining the frequency of specific patterns or words in text."
    },
    "textNewLine": {
      "category": "Text",
      "displayName": "new line",
      "searchTerms": [
        "new line",
        "textNewLine",
        "line break",
        "end of line",
        "newline character",
        "line separator",
        "carriage return"
      ],
      "description": "A newline character (also called 'end of line' or 'line break' character). Use this character inside the create text or append text puzzles to create multiline texts. Useful for formatting text with multiple lines, creating structured output, or adding line breaks to text content."
    },
    "convertToNumber": {
      "category": "Text",
      "displayName": "convert to number",
      "searchTerms": [
        "convert to number",
        "convertToNumber",
        "text to number",
        "string to number",
        "parse number",
        "number conversion",
        "numeric conversion"
      ],
      "description": "Tries to convert the specified text to number, so that the obtained value can be used as input for numeric operations. If conversion fails, returns 0. Useful for processing user input, parsing data, or converting string representations of numbers to actual numeric values for calculations."
    },
    "text_prompt_ext": {
      "category": "Text",
      "displayName": "prompt",
      "searchTerms": [
        "prompt",
        "text_prompt_ext",
        "user input",
        "input dialog",
        "popup input",
        "user prompt",
        "input field",
        "user interaction"
      ],
      "description": "Creates a pop-up window with an input field. The execution chain pauses until the user clicks OK or Cancel buttons, after which the puzzle returns the input value. Useful for getting user input during puzzle execution, creating interactive applications, or collecting user data."
    },
    "math_number": {
      "category": "Numbers",
      "displayName": "number",
      "searchTerms": [
        "number",
        "math_number",
        "integer",
        "float",
        "decimal",
        "numeric value",
        "scientific notation",
        "exponent notation"
      ],
      "description": "This universally used puzzle provides the means to supply some number to your Puzzles scenario. Numbers can be written without decimals (integers) or with decimals (floating-point numbers). Extra large or extra small numbers can be written with scientific (exponent) notation. Used across all puzzle categories for calculations, parameters, and numeric inputs."
    },
    "angle": {
      "category": "Numbers",
      "displayName": "angle",
      "searchTerms": [
        "angle",
        "degrees",
        "rotation",
        "angular value",
        "degree measurement"
      ],
      "description": "Allows you to visually define angle (in degrees). Used for rotation calculations, camera movements, object orientation, and trigonometric operations. Provides a user-friendly way to specify angular values without manual numeric input."
    },
    "math_arithmetic": {
      "category": "Numbers",
      "displayName": "arithmetic operation (with two inputs)",
      "searchTerms": [
        "arithmetic operation",
        "math_arithmetic",
        "addition",
        "subtraction",
        "multiplication",
        "division",
        "exponentiation",
        "power",
        "plus",
        "minus",
        "times",
        "divide",
        "math operations"
      ],
      "description": "Allows you to perform elementary arithmetic operations: addition (+), subtraction (-), multiplication (Ã—) and division (Ã·), as well as exponentiation (^). Note that floating-point arithmetic is not always 100% accurate, and may produce unpredictable results when comparing numeric values. To get rid of those precision issues, you may use rounding with precision."
    },
    "math_single": {
      "category": "Numbers",
      "displayName": "arithmetic operation (with single input)",
      "searchTerms": [
        "arithmetic operation single",
        "math_single",
        "square root",
        "absolute value",
        "modulus",
        "negation",
        "sign change",
        "natural logarithm",
        "decimal logarithm",
        "natural exponential",
        "power of ten",
        "sqrt",
        "abs",
        "ln",
        "log10",
        "exp"
      ],
      "description": "Allows you to perform mathematical operations on a single value: square root (âˆš), absolute value aka modulus (|x|), sign change aka negation (-), natural logarithm (ln), decimal logarithm (log10), natural exponential function (e^), and power of ten (10^). Note that floating-point arithmetic is not always 100% accurate, and may produce unpredictable results when comparing numeric values."
    },
    "math_round": {
      "category": "Numbers",
      "displayName": "round (to integer)",
      "searchTerms": [
        "round",
        "math_round",
        "round to integer",
        "round up",
        "round down",
        "nearest integer",
        "ceiling",
        "floor",
        "integer conversion"
      ],
      "description": "Rounds a specified number. The round variant rounds a number to the nearest integer: 2.49 will be rounded down (producing 2), and 2.5 will be rounded up (producing 3). The round up variant rounds a number upward to the nearest integer: 2.1 will be rounded up (producing 3). The round down variant rounds a number downward to the nearest integer: 2.9 will be rounded down (producing 2)."
    },
    "toFixedPoint": {
      "category": "Numbers",
      "displayName": "round with precision",
      "searchTerms": [
        "round with precision",
        "toFixedPoint",
        "decimal places",
        "precision rounding",
        "fixed decimal",
        "decimal precision",
        "floating point precision"
      ],
      "description": "Rounds a given number using the specified precision. This is useful for handling floating-point arithmetic precision issues. Floating-point arithmetic is not always 100% accurate, and may produce unpredictable results when comparing numeric values. To get rid of those precision issues, you may use rounding with precision."
    },
    "math_number_property": {
      "category": "Numbers",
      "displayName": "check",
      "searchTerms": [
        "check",
        "math_number_property",
        "even",
        "odd",
        "prime",
        "whole",
        "positive",
        "negative",
        "divisible",
        "number properties",
        "number validation"
      ],
      "description": "Checks whether a specified number is even, odd, prime, whole, positive, negative, or divisible by some other number. The result is true if this is the case and false if not. For using with Logic puzzles. Useful for number validation, conditional logic, and mathematical analysis."
    },
    "math_constrain": {
      "category": "Numbers",
      "displayName": "clamp",
      "searchTerms": [
        "clamp",
        "math_constrain",
        "constrain",
        "limit",
        "bound",
        "min max",
        "range limit",
        "value constraint"
      ],
      "description": "Constraints a number to be between the specified limits (inclusive). This ensures a value stays within a defined range by setting minimum and maximum boundaries. Useful for preventing values from going out of acceptable ranges, such as keeping object positions within bounds or limiting animation parameters."
    },
    "mapRange": {
      "category": "Numbers",
      "displayName": "map range",
      "searchTerms": [
        "map range",
        "mapRange",
        "range mapping",
        "value mapping",
        "scale value",
        "convert range",
        "linear mapping",
        "interpolation"
      ],
      "description": "Maps a given value from one range to another. Example: converting position of the slider that moves from -10 to 10 units along axis X to percentage value from 0% to 100%. Useful for converting between different coordinate systems, scaling values, or creating proportional relationships between different numeric ranges."
    },
    "math_random_int": {
      "category": "Numbers",
      "displayName": "random integer",
      "searchTerms": [
        "random integer",
        "math_random_int",
        "random number",
        "random int",
        "random whole number",
        "random between",
        "random range"
      ],
      "description": "Returns a random integer number between specified numbers (inclusive both limits). Note: supplying non-integer limits is possible, although this extends the range as this puzzle performs some additional rounding under the hood. Useful for generating random values, creating variety in animations, or implementing random selection algorithms."
    },
    "math_random_float": {
      "category": "Numbers",
      "displayName": "random fraction",
      "searchTerms": [
        "random fraction",
        "math_random_float",
        "random float",
        "random decimal",
        "random between 0 and 1",
        "random probability",
        "random percentage"
      ],
      "description": "Returns a random floating-point number between 0 (inclusive) and 1 (exclusive). Useful for generating random colors, probabilities, percentages, or any value that needs to be normalized between 0 and 1. Often used in combination with other operations to create random effects."
    },
    "math_modulo": {
      "category": "Numbers",
      "displayName": "remainder",
      "searchTerms": [
        "remainder",
        "math_modulo",
        "modulo",
        "mod",
        "division remainder",
        "modulo operation",
        "remainder after division"
      ],
      "description": "Finds the remainder after division of one number by another (aka the modulo operation). Useful for creating repeating patterns, cycling through values, determining if a number is even or odd, or implementing circular behaviors. Common in animation loops, color cycling, and periodic effects."
    },
    "math_on_list": {
      "category": "Numbers",
      "displayName": "operations on list",
      "searchTerms": [
        "operations on list",
        "math_on_list",
        "list operations",
        "sum",
        "min",
        "max",
        "average",
        "median",
        "modes",
        "standard deviation",
        "random item",
        "list math",
        "statistics"
      ],
      "description": "Performs an operation on the numbers of a specified list. Operations include: sum (calculates the sum of all numbers), min (finds the smallest number), max (finds the largest number), average (finds the arithmetic mean), median (finds the middle number when sorted), modes (finds numbers that appear most frequently), standard deviation (calculates statistical deviation), and random item (returns a randomly chosen item)."
    },
    "math_trig": {
      "category": "Numbers",
      "displayName": "trigonometric functions",
      "searchTerms": [
        "trigonometric functions",
        "math_trig",
        "sine",
        "cosine",
        "tangent",
        "arcsine",
        "arccosine",
        "arctangent",
        "sin",
        "cos",
        "tan",
        "asin",
        "acos",
        "atan",
        "trigonometry"
      ],
      "description": "Allows you to calculate the values of the trigonometric functions sine (sin), cosine (cos), and tangent (tan), as well as the values of their inverse counterparts arcsine (asin), arccosine (acos), and arctangent (atan). The puzzle expects (or returns) values expressed in degrees. Note that floating-point arithmetic is not always 100% accurate, and may produce unpredictable results when comparing numeric values."
    },
    "math_constant": {
      "category": "Numbers",
      "displayName": "constants",
      "searchTerms": [
        "constants",
        "math_constant",
        "pi",
        "euler's number",
        "e",
        "golden ratio",
        "phi",
        "square root of 2",
        "square root of 1/2",
        "infinity",
        "mathematical constants"
      ],
      "description": "Returns mathematical constants: pi (Ï€), Euler's number e, the golden ratio (Ï†), square root of 2, square root of Â½, and infinity value (âˆž). These constants are fundamental to mathematical calculations, geometry, physics simulations, and advanced mathematical operations in 3D applications."
    },
    "createVector": {
      "category": "Numbers",
      "displayName": "create vector",
      "searchTerms": [
        "create vector",
        "createVector",
        "vector",
        "3d vector",
        "x y z",
        "coordinates",
        "position vector",
        "direction vector"
      ],
      "description": "Returns a new three-dimensional vector which consists of the given X, Y, Z coordinates. Vectors are fundamental to 3D graphics and are used for positions, directions, velocities, and other spatial relationships. Essential for object positioning, movement calculations, and spatial transformations."
    },
    "setVectorValue": {
      "category": "Numbers",
      "displayName": "set vector value",
      "searchTerms": [
        "set vector value",
        "setVectorValue",
        "set vector",
        "modify vector",
        "change vector",
        "update vector",
        "vector assignment"
      ],
      "description": "Sets the given value (x, y, z coordinate or length) for the given vector. This allows you to modify existing vectors by changing their individual components or overall magnitude. Useful for updating object positions, adjusting movement vectors, or modifying spatial relationships."
    },
    "getVectorValue": {
      "category": "Numbers",
      "displayName": "get vector value",
      "searchTerms": [
        "get vector value",
        "getVectorValue",
        "get vector",
        "vector x",
        "vector y",
        "vector z",
        "vector length",
        "vector properties",
        "is zero",
        "negated",
        "normalized"
      ],
      "description": "Returns values taken or calculated from the given vector. Returned values include: x (X coordinate), y (Y coordinate), z (Z coordinate), is zero (true if vector has zero length), length (vector magnitude), negated (new vector pointing in reverse direction), and normalized (new vector with length 1). Essential for vector analysis and calculations."
    },
    "vectorMath": {
      "category": "Numbers",
      "displayName": "vector math",
      "searchTerms": [
        "vector math",
        "vectorMath",
        "vector operations",
        "add vectors",
        "subtract vectors",
        "multiply vectors",
        "divide vectors",
        "dot product",
        "cross product",
        "rotate vector",
        "vector arithmetic"
      ],
      "description": "Performs math operations between two vectors and returns a new vector. Operations include: + (add vectors), - (subtract vectors), Ã— (multiply vectors per-component), / (divide vectors per-component), dot (calculate dot product), cross (calculate cross product), and rotate (rotate a vector by Euler angles in degrees). Fundamental for 3D graphics, physics, and spatial calculations."
    },
    "lists_create_with": {
      "category": "Lists",
      "displayName": "create",
      "searchTerms": [
        "create",
        "lists_create_with",
        "create list",
        "new list",
        "list creation",
        "initialize list",
        "list with items",
        "nested list"
      ],
      "description": "Allows you to create a new list and specify the initial values. Additional inputs are added by dragging an item block from the gray toolbox on the left into the list block. Lists can be nested (e.g. list of lists), or have no entries specified at any of the positions. In the latter case a null value is automatically put in a missed position. Very useful when you need to handle multiple items, such as objects, in bulk."
    },
    "lists_length": {
      "category": "Lists",
      "displayName": "length",
      "searchTerms": [
        "length",
        "lists_length",
        "list length",
        "count items",
        "number of items",
        "list size",
        "item count",
        "list count"
      ],
      "description": "Counts the number of items in the specified list. The null values automatically inserted in missed positions will also be counted. Returns the total number of elements in the list, including any null values that were automatically inserted in empty positions."
    },
    "lists_getIndex": {
      "category": "Lists",
      "displayName": "get / remove",
      "searchTerms": [
        "get / remove",
        "lists_getIndex",
        "get item",
        "remove item",
        "get list item",
        "remove list item",
        "retrieve item",
        "extract item",
        "list access"
      ],
      "description": "Retrieves (and / or removes) the item from the specified position (items in a list are indexed starting from 0). This allows you to access specific elements in a list by their position, and optionally remove them from the list. Useful for processing list items one by one or extracting specific elements."
    },
    "lists_setIndex": {
      "category": "Lists",
      "displayName": "set / insert",
      "searchTerms": [
        "set / insert",
        "lists_setIndex",
        "set item",
        "insert item",
        "add item",
        "replace item",
        "list modification",
        "list update",
        "list insertion"
      ],
      "description": "Allows you to add items to a list. The set variant replaces the item at a specified position in a list with a different item (the length of the list stays the same). The insert variant adds a new item into the list at the specified position, shifting the item previously at that position (thus increasing the length of the list). Remember that items in a list are indexed starting from 0."
    },
    "lists_create_empty": {
      "category": "Lists",
      "displayName": "create empty",
      "searchTerms": [
        "create empty",
        "lists_create_empty",
        "empty list",
        "blank list",
        "new empty list",
        "initialize empty list",
        "create blank list"
      ],
      "description": "Creates a new blank list to be filled with items later. This creates an empty list with no initial items that can be populated dynamically. Useful when you need to build a list incrementally or when the list contents are not known at creation time."
    },
    "lists_repeat": {
      "category": "Lists",
      "displayName": "create with item repeated",
      "searchTerms": [
        "create with item repeated",
        "lists_repeat",
        "repeat item",
        "duplicate item",
        "fill list",
        "initialize with repeated",
        "list with duplicates",
        "repeated elements"
      ],
      "description": "Creates a new list and initiates all the positions with the same given item. The main difference with the create empty variant is that the list is initialized with a predefined length, and with some initial values. Useful for creating lists with default values or when you need multiple copies of the same item."
    },
    "lists_reverse": {
      "category": "Lists",
      "displayName": "reverse",
      "searchTerms": [
        "reverse",
        "lists_reverse",
        "reverse list",
        "flip list",
        "invert list",
        "backwards list",
        "mirror list"
      ],
      "description": "Creates a new list filled with the items from the original list in reverse order. The original list will not be changed. This creates a completely new list with the elements in the opposite order, useful for processing items in reverse sequence or creating mirror effects."
    },
    "lists_isEmpty": {
      "category": "Lists",
      "displayName": "is empty",
      "searchTerms": [
        "is empty",
        "lists_isEmpty",
        "check empty",
        "list empty",
        "empty check",
        "has items",
        "list has items",
        "list validation"
      ],
      "description": "Checks if a specified list does not contain any items, and returns true in such the case, or false otherwise. For using with Logic puzzles. Useful for validation, checking if a list has been populated, or determining if processing should continue."
    },
    "lists_indexOf": {
      "category": "Lists",
      "displayName": "find",
      "searchTerms": [
        "find",
        "lists_indexOf",
        "find item",
        "search list",
        "find in list",
        "item position",
        "list search",
        "index of item"
      ],
      "description": "Can be used to check whether an item is contained in a list and, if so, where it appears. If the item was found, it returns its position (items in list are indexed starting from 0). If the item was not found, the puzzle returns -1. Useful for searching lists, checking if items exist, or finding the position of specific elements."
    },
    "listsCheckItem": {
      "category": "Lists",
      "displayName": "check item",
      "searchTerms": [
        "check item",
        "listsCheckItem",
        "contains item",
        "item exists",
        "list contains",
        "has item",
        "item check",
        "list membership"
      ],
      "description": "Can be used to check whether an item is contained in a list. If the item was found, it returns boolean value true. If the item was not found, the puzzle returns false. This is a simpler alternative to find when you only need to know if an item exists, not its position."
    },
    "lists_getSublist": {
      "category": "Lists",
      "displayName": "get sub-list",
      "searchTerms": [
        "get sub-list",
        "lists_getSublist",
        "sub list",
        "extract sublist",
        "list slice",
        "get portion",
        "list subset",
        "extract region"
      ],
      "description": "Allows a region of list between two specified positions to be extracted as new list (items in list are indexed starting from 0). The original list will not be changed. Useful for working with portions of lists, extracting specific ranges, or creating subsets of data."
    },
    "lists_sort": {
      "category": "Lists",
      "displayName": "sort",
      "searchTerms": [
        "sort",
        "lists_sort",
        "sort list",
        "order list",
        "ascending",
        "descending",
        "alphabetical",
        "numerical sort",
        "list ordering"
      ],
      "description": "Creates a new list filled with the items from the original list sorted in ascending or descending order. The original list will not be changed. Useful for organizing data, creating ordered sequences, or preparing lists for processing in a specific order."
    },
    "lists_split": {
      "category": "Lists",
      "displayName": "list from text / text from list",
      "searchTerms": [
        "list from text / text from list",
        "lists_split",
        "split text",
        "join list",
        "text to list",
        "list to text",
        "text splitting",
        "list joining",
        "string conversion"
      ],
      "description": "Allows you to create a list by splitting some text, or do the opposite - join list items into a line of text. This enables conversion between text strings and lists, useful for parsing text data, creating comma-separated values, or processing text-based information."
    },
    "dictCreateEmpty": {
      "category": "Dictionaries",
      "displayName": "create empty dict",
      "searchTerms": [
        "create empty dict",
        "dictCreateEmpty",
        "empty dictionary",
        "new dictionary",
        "blank dictionary",
        "initialize dictionary",
        "create dict"
      ],
      "description": "Returns a dictionary which contains no items. Internally in JavaScript, an empty dictionary is represented by an object without any properties, that is { }. Useful for creating dictionaries that will be populated dynamically or when you need to start with an empty data structure."
    },
    "dictCreateWith": {
      "category": "Dictionaries",
      "displayName": "create dict with",
      "searchTerms": [
        "create dict with",
        "dictCreateWith",
        "dictionary with keys",
        "create dictionary",
        "key value pairs",
        "initialize dictionary",
        "dictionary creation",
        "named storage"
      ],
      "description": "Returns a dictionary with given keys and values. Keys/values can be lists or multi-line texts, where each line represents a key or value. Keys are always defined as strings, but values can be of any type (strings, numbers, booleans, lists, other dictionaries, etc.). Contrary to lists, there is no particular sorting order applied to dictionary items."
    },
    "dictSet": {
      "category": "Dictionaries",
      "displayName": "dict set key",
      "searchTerms": [
        "dict set key",
        "dictSet",
        "set dictionary key",
        "add key value",
        "assign key",
        "dictionary assignment",
        "set value",
        "update dictionary"
      ],
      "description": "Sets the item to be associated with a specified key in a dictionary. The key must be a text, while the assigned value may be of any type (text, number, list, other dictionary, etc). This allows you to add new key-value pairs or update existing ones in the dictionary."
    },
    "dictGet": {
      "category": "Dictionaries",
      "displayName": "dict get key",
      "searchTerms": [
        "dict get key",
        "dictGet",
        "get dictionary key",
        "retrieve value",
        "get value",
        "dictionary access",
        "key lookup",
        "extract value"
      ],
      "description": "Returns the item associated with a specified key in a dictionary. This allows you to retrieve values stored in the dictionary by their key names. Useful for accessing stored data, configuration values, or object properties."
    },
    "dictGetKeys": {
      "category": "Dictionaries",
      "displayName": "get keys",
      "searchTerms": [
        "get keys",
        "dictGetKeys",
        "dictionary keys",
        "list keys",
        "all keys",
        "key names",
        "dictionary properties",
        "key enumeration"
      ],
      "description": "Returns a list of all keys present in a dictionary. This allows you to see all the available keys in a dictionary, useful for iterating over dictionary contents, checking what data is available, or processing all stored values."
    },
    "dictCheck": {
      "category": "Dictionaries",
      "displayName": "dict check key",
      "searchTerms": [
        "dict check key",
        "dictCheck",
        "check dictionary key",
        "key exists",
        "has key",
        "dictionary contains",
        "key validation",
        "dictionary membership"
      ],
      "description": "Checks if a specified key is present in a dictionary, and returns the Boolean-typed result true or false. Useful for validation, checking if data exists before trying to access it, or determining if a dictionary contains specific information."
    },
    "dictRemove": {
      "category": "Dictionaries",
      "displayName": "dict remove key",
      "searchTerms": [
        "dict remove key",
        "dictRemove",
        "remove dictionary key",
        "delete key",
        "remove value",
        "dictionary deletion",
        "key removal",
        "clean dictionary"
      ],
      "description": "Removes the value associated with a specified key in a dictionary, and deletes the key itself. This completely removes the key-value pair from the dictionary, useful for cleaning up data, removing obsolete information, or managing dictionary size."
    },
    "dictIsEmpty": {
      "category": "Dictionaries",
      "displayName": "is empty",
      "searchTerms": [
        "is empty",
        "dictIsEmpty",
        "dictionary empty",
        "check empty",
        "has keys",
        "dictionary validation",
        "empty check",
        "dictionary size"
      ],
      "description": "Checks if a specified dictionary contains no keys, and returns the Boolean-typed result true or false. Useful for validation, checking if a dictionary has been populated, or determining if processing should continue based on available data."
    },
    "console.log": {
      "category": "System",
      "displayName": "print to console",
      "searchTerms": [
        "print to console",
        "console.log",
        "debug",
        "log",
        "output",
        "print",
        "console output",
        "debugging"
      ],
      "description": "Prints data of any type (an output from some puzzle, a variable, or just a text) to the browser console. Printing to console is the most universal and easy-to-use method to debug your scripts. Useful for debugging, monitoring variable values, and tracking program flow."
    },
    "printPerformanceInfo": {
      "category": "System",
      "displayName": "print performance info",
      "searchTerms": [
        "print performance info",
        "printPerformanceInfo",
        "performance profile",
        "performance benchmark",
        "performance measurement",
        "performance analysis",
        "bottleneck detection",
        "performance monitoring"
      ],
      "description": "Records a performance profile during 1 second and prints it to the browser console. Use this profile to find performance bottlenecks and improve application rendering and loading speed. Useful for optimization, identifying slow operations, and monitoring application performance."
    },
    "checkPerformance": {
      "category": "System",
      "displayName": "check performance",
      "searchTerms": [
        "check performance",
        "checkPerformance",
        "GPU benchmark",
        "performance test",
        "hardware detection",
        "GPU classification",
        "performance measurement",
        "device capability"
      ],
      "description": "Measure rendering capabilities of the user's computer or device. Uses the open source library Detect GPU to find an existing benchmark result and classify the user's GPU as 'good' or 'poor'. Use this to load simpler scenes or disable intensive features for poor GPUs, or boost quality for powerful GPUs."
    },
    "featureAvailable": {
      "category": "System",
      "displayName": "feature available",
      "searchTerms": [
        "feature available",
        "featureAvailable",
        "browser feature",
        "device detection",
        "platform check",
        "capability check",
        "mobile detection",
        "OS detection"
      ],
      "description": "Check if a feature selected from the drop-down is available in the user's browser. Returns true if the feature is available, false otherwise. Features include Mobile Device, Android, iOS, Windows, macOS, ChromeOS, Linux, Google Chrome, Firefox, Microsoft Edge, Safari, Touch Screen, Retina Display, HDR, Web Audio API, WebGL, WebGL 2.0, WooCommerce, and Do Not Track."
    },
    "getGPU": {
      "category": "System",
      "displayName": "get GPU",
      "searchTerms": [
        "get GPU",
        "getGPU",
        "GPU info",
        "GPU vendor",
        "GPU model",
        "graphics card",
        "hardware info",
        "device GPU"
      ],
      "description": "Outputs the user's GPU info â€” vendor (e.g., NVIDIA Corporation, Apple Inc., Qualcomm) and GPU model (e.g., GeForce GTX 1060 3GB/PCIe/SSE2, Apple A9 GPU, Adreno (TM) 330). Useful for hardware detection, performance optimization, and device-specific features."
    },
    "setScreenScale": {
      "category": "System",
      "displayName": "set screen scale",
      "searchTerms": [
        "set screen scale",
        "setScreenScale",
        "screen resolution",
        "canvas scale",
        "retina rendering",
        "pixel density",
        "display quality",
        "performance optimization"
      ],
      "description": "Set screen resolution factor for the rendered canvas. Set > 1 to improve quality, < 1 to improve performance. 1 is the default screen scale on both Retina (HiDPI) and non-Retina displays. Verge3D uses 1 as default to prevent rendering too many pixels on Retina displays."
    },
    "nativeScreenScale": {
      "category": "System",
      "displayName": "native screen scale",
      "searchTerms": [
        "native screen scale",
        "nativeScreenScale",
        "native resolution",
        "hardware scale",
        "display scale",
        "retina scale",
        "HiDPI scale",
        "pixel ratio"
      ],
      "description": "Native (depends on hardware or browser zooming) canvas resolution factor. If you don't zoom in or out your page, this value equals 1 for non-Retina displays, > 1 for HiDPI displays, modern smartphones and tablets. Useful for determining optimal rendering quality."
    },
    "detectGamepad": {
      "category": "System",
      "displayName": "detect gamepad device",
      "searchTerms": [
        "detect gamepad device",
        "detectGamepad",
        "gamepad detection",
        "controller detection",
        "input device",
        "gamepad connection",
        "controller connection"
      ],
      "description": "Detect gamepad devices connected to or disconnected from your system. When a new gamepad device is found, the puzzles specified in the 'once connected do' slot are triggered. When the device is disconnected, the puzzles specified in the 'once disconnected do' slot are triggered. The gamepad index value is set and returned."
    },
    "gamepadIndex": {
      "category": "System",
      "displayName": "gamepad index",
      "searchTerms": [
        "gamepad index",
        "gamepadIndex",
        "controller index",
        "device index",
        "gamepad number",
        "controller number"
      ],
      "description": "Returns connected/disconnected gamepad device index. This identifies which gamepad device is being referenced in other gamepad-related operations."
    },
    "getGamepadProp": {
      "category": "System",
      "displayName": "get gamepad property",
      "searchTerms": [
        "get gamepad property",
        "getGamepadProp",
        "gamepad property",
        "controller property",
        "gamepad button",
        "gamepad axis",
        "controller input",
        "gamepad state"
      ],
      "description": "Returns a gamepad property for the device with the given index. Properties include connection status, axis position (-1.0 to 1.0), button state, analog button state (0-1), device ID, timestamp, mapping (standard/xr-standard), and debug info. Useful for gamepad input handling and controller support."
    },
    "localStorageSet": {
      "category": "System",
      "displayName": "storage set",
      "searchTerms": [
        "storage set",
        "localStorageSet",
        "local storage",
        "browser storage",
        "persistent storage",
        "save data",
        "store data",
        "key value storage"
      ],
      "description": "Stores key-value pairs in the web browser's local storage with no expiration time. Data persists even after the browser window is closed. The key must be a text. Supported data types: number, text, list, dictionary. Note: local storage is cleared in private browsing sessions."
    },
    "localStorageGet": {
      "category": "System",
      "displayName": "storage get",
      "searchTerms": [
        "storage get",
        "localStorageGet",
        "get storage",
        "retrieve data",
        "load data",
        "browser storage",
        "local storage",
        "persistent data"
      ],
      "description": "Returns a value associated with a specified key in the web browser's local storage. This allows you to retrieve previously stored data, including numbers, text, lists, and dictionaries. Useful for maintaining user preferences, game state, or application data across sessions."
    },
    "localStorageRemove": {
      "category": "System",
      "displayName": "storage remove",
      "searchTerms": [
        "storage remove",
        "localStorageRemove",
        "delete storage",
        "clear data",
        "remove data",
        "browser storage",
        "local storage",
        "delete key"
      ],
      "description": "Removes a value associated with a specified key in the web browser's local storage. This completely deletes the key-value pair from persistent storage. Useful for cleaning up obsolete data, clearing user preferences, or managing storage space."
    },
    "localStorageCheck": {
      "category": "System",
      "displayName": "storage check",
      "searchTerms": [
        "storage check",
        "localStorageCheck",
        "check storage",
        "key exists",
        "data exists",
        "browser storage",
        "local storage",
        "storage validation"
      ],
      "description": "Checks if a specified key is present in the web browser's local storage. Returns true if the key exists, false otherwise. Useful for validation, checking if data has been stored, or determining if user preferences exist before trying to access them."
    },
    "closeApp": {
      "category": "System",
      "displayName": "close app",
      "searchTerms": [
        "close app",
        "closeApp",
        "exit app",
        "quit app",
        "terminate app",
        "close application",
        "exit application"
      ],
      "description": "Closes the Verge3D application. Due to security limitations imposed by web browsers, this puzzle only works for Electron, Cordova, or programmatically opened pages. Useful for desktop applications or mobile apps where you need to provide an exit option."
    },
    "comment": {
      "category": "Advanced",
      "displayName": "comment",
      "searchTerms": [
        "comment",
        "note",
        "documentation",
        "explanation",
        "description",
        "code comment",
        "script comment"
      ],
      "description": "This puzzle does nothing except places a comment line to make your script easier to grasp. It also adds a JavaScript comment line to visual_logic.js. Useful for documenting your code, explaining complex logic, or adding notes for future reference."
    },
    "execScript": {
      "category": "Advanced",
      "displayName": "exec script",
      "searchTerms": [
        "exec script",
        "execScript",
        "execute script",
        "JavaScript code",
        "custom code",
        "inline script",
        "code execution",
        "Ace Editor"
      ],
      "description": "Executes the specified JavaScript code. Uses Ace Editor for displaying and editing content with keyboard shortcuts support. The puzzle can be resized to change the editor's width and height. Built-in variables available: app (application instance), v3d (engine modules), puzzles (Puzzles Logic object), VARS (variables), PROC (procedures). Note: app variable not available in Init tab."
    },
    "callJSFunction": {
      "category": "Advanced",
      "displayName": "call external function",
      "searchTerms": [
        "call external function",
        "callJSFunction",
        "external function",
        "JavaScript function",
        "custom function",
        "external interface",
        "function call",
        "external code"
      ],
      "description": "Executes a function specified in the JavaScript code of the application. Optionally passes parameters to be used as function arguments. Functions must be added to the prepareExternalInterface declaration in the application's .js file. Useful for integrating custom JavaScript functionality with Puzzles."
    },
    "callJSFunctionWithReturn": {
      "category": "Advanced",
      "displayName": "call external function with return",
      "searchTerms": [
        "call external function with return",
        "callJSFunctionWithReturn",
        "external function return",
        "JavaScript function return",
        "get function result",
        "external function result",
        "function return value"
      ],
      "description": "Executes a function specified in the JavaScript code of the application and returns its result. Optionally passes parameters to be used as function arguments. Functions must be added to the prepareExternalInterface declaration in the application's .js file. Useful for getting values from custom JavaScript functions."
    },
    "loadFile": {
      "category": "Advanced",
      "displayName": "load data",
      "searchTerms": [
        "load data",
        "loadFile",
        "load file",
        "load content",
        "load resource",
        "load asset",
        "load information",
        "load content"
      ],
      "description": "Load data from a specified location. The retrieved data can be accessed via the loaded data puzzle. JSON objects are automatically converted to dictionaries, all other data types are returned as text values. Results are cached by default. Use disable caching option to prevent caching. Enable 'on error' slot for error handling."
    },
    "sendData": {
      "category": "Advanced",
      "displayName": "send data",
      "searchTerms": [
        "send data",
        "sendData",
        "send information",
        "send content",
        "send file",
        "send resource",
        "send asset",
        "send information"
      ],
      "description": "Send a specified data to a remote location using an asynchronous POST HTTP request. The retrieved data can be accessed via the loaded data puzzle. JSON objects are automatically converted to dictionaries, form data values are sent as is, while all other data types are sent/received as text values. Enable 'with headers' slot for additional request headers. Enable 'on error' slot for error handling."
    },
    "loadedFile": {
      "category": "Advanced",
      "displayName": "loaded data",
      "searchTerms": [
        "loaded data",
        "loadedFile",
        "loaded file",
        "loaded content",
        "loaded resource",
        "loaded asset",
        "loaded information",
        "loaded content"
      ],
      "description": "Returns data retrieved by the load data or send data puzzles. This allows you to access the results of network requests, including JSON objects (converted to dictionaries), text data, or other content types."
    },
    "readJSON": {
      "category": "Advanced",
      "displayName": "read JSON",
      "searchTerms": [
        "read JSON",
        "readJSON",
        "parse JSON",
        "JSON parser",
        "JavaScript Object Notation",
        "JSON data",
        "JSON object",
        "JSON parsing"
      ],
      "description": "Interprets text (or Data URL) as JavaScript Object Notation data which is returned in a dictionary. Useful for parsing JSON responses from APIs, reading JSON configuration files, or processing structured data in text format."
    },
    "readCSV": {
      "category": "Advanced",
      "displayName": "read CSV",
      "searchTerms": [
        "read CSV",
        "readCSV",
        "parse CSV",
        "comma separated values",
        "CSV parser",
        "table data",
        "spreadsheet data",
        "CSV parsing"
      ],
      "description": "Interprets text (or Data URL) as comma-separated values. Returns a list of table rows, with each row represented as a list of values. The delimiter can be selected with the drop-down to correspond to CSV file's export settings. 'from row' value denotes how many rows will be skipped starting from the top. Table rows and values are accessed by their numeric indices starting from 0."
    },
    "connector": {
      "category": "Advanced",
      "displayName": "connector",
      "searchTerms": [
        "connector",
        "connect puzzles",
        "group puzzles",
        "organize puzzles",
        "puzzle connector",
        "block connector",
        "puzzle grouping"
      ],
      "description": "This puzzle facilitates connecting other puzzles with each other, to make it more convenient to move, delete and use them in other puzzles. The most notable application is to join load sound or load video puzzles into a single group to organize preloading of media resources in your application."
    },
    "connectorSlot": {
      "category": "Advanced",
      "displayName": "connector (slot-based)",
      "searchTerms": [
        "connector (slot-based)",
        "connectorSlot",
        "slot connector",
        "slot-based connector",
        "puzzle connector",
        "block connector",
        "puzzle grouping"
      ],
      "description": "This puzzle facilitates connecting other puzzles with each other, to make them more convenient to move, delete, comment, and use in the library. Provides a slot-based approach to puzzle organization and management."
    },
    "saveState": {
      "category": "Advanced",
      "displayName": "save state",
      "searchTerms": [
        "save state",
        "saveState",
        "save game state",
        "save application state",
        "save object state",
        "save variable state",
        "state preservation",
        "state backup"
      ],
      "description": "Saves the state of specified objects and/or the values of variables specified by their names. The objects are cloned and stored in memory. The values of the variables are retrieved and stored in memory for each specified variable name. If called several times, states are saved in sequence so that it is possible to return to any previous state with the undo state puzzle."
    },
    "undoState": {
      "category": "Advanced",
      "displayName": "undo state",
      "searchTerms": [
        "undo state",
        "undoState",
        "restore state",
        "restore game state",
        "restore application state",
        "restore object state",
        "restore variable state",
        "state restoration"
      ],
      "description": "Restores the state of objects and/or variables saved with the save state puzzle. If called several times, the states are restored from the saved sequence (if any) which makes it possible to return to any previously saved state from the stack. Use the state counter variable to catch situations when there is no saved state present in the undo history."
    },
    "allVariableNames": {
      "category": "Advanced",
      "displayName": "all variable names",
      "searchTerms": [
        "all variable names",
        "allVariableNames",
        "variable names",
        "all variables",
        "variable list",
        "variable enumeration",
        "get all variables"
      ],
      "description": "Returns a list with the names of all variables used in Puzzles. Useful for dynamic variable access, debugging, or creating variable management systems."
    },
    "getVariableValueByName": {
      "category": "Advanced",
      "displayName": "variable value by name",
      "searchTerms": [
        "variable value by name",
        "getVariableValueByName",
        "get variable by name",
        "dynamic variable access",
        "variable by name",
        "get variable value",
        "variable lookup"
      ],
      "description": "Returns the value of a variable specified by its name. This puzzle works similarly to the standard variable value puzzle, yet does not require selecting a variable from the predefined dropdown menu. Useful for dynamic variable access or when variable names are determined at runtime."
    },
    "getJavaScriptObject": {
      "category": "Advanced",
      "displayName": "JavaScript object",
      "searchTerms": [
        "JavaScript object",
        "getJavaScriptObject",
        "JS object",
        "JavaScript reference",
        "object reference",
        "JavaScript access",
        "object access"
      ],
      "description": "Returns a given JavaScript object. Available objects include: arguments (function arguments), html element (DOM object), form data (FormData object), this (JavaScript this keyword), and window (top-level window object). Useful for accessing JavaScript objects and properties not directly supported by other puzzles."
    },
    "waitPromise": {
      "category": "Advanced",
      "displayName": "wait promise",
      "searchTerms": [
        "wait promise",
        "waitPromise",
        "promise wait",
        "async wait",
        "promise resolution",
        "async operation",
        "promise handling"
      ],
      "description": "Wait for the promise to be resolved or rejected and return its value (or rejection reason) in the promise value puzzle. Required for async puzzles like export to gltf and generate normal map that return promise values. Use when implicit promise resolution doesn't happen automatically."
    },
    "promiseValue": {
      "category": "Advanced",
      "displayName": "promise value",
      "searchTerms": [
        "promise value",
        "promiseValue",
        "resolved promise",
        "promise result",
        "async result",
        "promise outcome",
        "promise resolution"
      ],
      "description": "Resolved promise value (in case of resolved promise) or error string (in case of rejected promise). This puzzle provides access to the result of async operations that return promises."
    },
    "addEventListener": {
      "category": "Advanced",
      "displayName": "add event listener",
      "searchTerms": [
        "add event listener",
        "addEventListener",
        "add listener",
        "event listener",
        "register listener",
        "subscribe to event",
        "event handling"
      ],
      "description": "Adds a listener to the specified event type, i.e. executes Puzzles' procedure obtained through the get procedure puzzle when the specified event type is raised. Useful for creating custom event systems and decoupled communication between different parts of your application."
    },
    "removeEventListener": {
      "category": "Advanced",
      "displayName": "remove event listener",
      "searchTerms": [
        "remove event listener",
        "removeEventListener",
        "remove listener",
        "unregister listener",
        "unsubscribe from event",
        "clean up listener",
        "event cleanup"
      ],
      "description": "Removes listener from the specified event type, i.e. removes given procedure from the event type listener. Useful for cleaning up event listeners to prevent memory leaks and ensure proper event system management."
    },
    "dispatchEvent": {
      "category": "Advanced",
      "displayName": "dispatch event",
      "searchTerms": [
        "dispatch event",
        "dispatchEvent",
        "trigger event",
        "fire event",
        "raise event",
        "send event",
        "event dispatch"
      ],
      "description": "Trigger an event of the specified type. Optionally passes parameters to be used as procedure arguments (i.e. the same arguments for each procedure). Useful for creating custom event systems and triggering procedures across different parts of your application."
    },
    "Adam's Awesome Tools/stepBlock": {
      "category": "Adam's Custom Tools",
      "displayName": "Adam's Awesome Tools/stepBlock",
      "searchTerms": [
        "Adam's Awesome Tools/stepBlock"
      ],
      "description": "Block of type Adam's Awesome Tools/stepBlock"
    },
    "Adam's Awesome Tools/shortCutsBlock": {
      "category": "Adam's Custom Tools",
      "displayName": "Adam's Awesome Tools/shortCutsBlock",
      "searchTerms": [
        "Adam's Awesome Tools/shortCutsBlock"
      ],
      "description": "Block of type Adam's Awesome Tools/shortCutsBlock"
    },
    "Adam's Awesome Tools/grabBlock": {
      "category": "Adam's Custom Tools",
      "displayName": "Adam's Awesome Tools/grabBlock",
      "searchTerms": [
        "Adam's Awesome Tools/grabBlock"
      ],
      "description": "Block of type Adam's Awesome Tools/grabBlock"
    },
    "Adam's Awesome Tools/improvedSearch": {
      "category": "Adam's Custom Tools",
      "displayName": "Adam's Awesome Tools/improvedSearch",
      "searchTerms": [
        "Adam's Awesome Tools/improvedSearch"
      ],
      "description": "Block of type Adam's Awesome Tools/improvedSearch"
    },
    "Adam's Awesome Tools/minimap": {
      "category": "Adam's Custom Tools",
      "displayName": "Adam's Awesome Tools/minimap",
      "searchTerms": [
        "Adam's Awesome Tools/minimap"
      ],
      "description": "Block of type Adam's Awesome Tools/minimap"
    },
    "Adam's Awesome Tools/addMenuBlock": {
      "category": "Adam's Custom Tools",
      "displayName": "Adam's Awesome Tools/addMenuBlock",
      "searchTerms": [
        "Adam's Awesome Tools/addMenuBlock"
      ],
      "description": "Block of type Adam's Awesome Tools/addMenuBlock"
    },
    "E-Commerce/paypalCreateOrder": {
      "category": "E-Commerce",
      "displayName": "paypal create order",
      "searchTerms": [
        "paypal create order",
        "E-Commerce/paypalCreateOrder",
        "PayPal order",
        "create PayPal order",
        "PayPal payment",
        "online payment",
        "e-commerce payment",
        "PayPal transaction"
      ],
      "description": "Place PayPal order. This puzzle is the simplest e-commerce solution possible because it does not require any server-side configuration. To use it you only need verified PayPal business account. Requires client ID, product title, item price, currency, and quantity. Includes on success and on error slots for handling transaction results."
    },
    "E-Commerce/wooGetProductInfo": {
      "category": "E-Commerce",
      "displayName": "connect to WooCommerce",
      "searchTerms": [
        "connect to WooCommerce",
        "E-Commerce/wooGetProductInfo",
        "WooCommerce connection",
        "connect WooCommerce",
        "WooCommerce setup",
        "e-commerce connection",
        "WooCommerce integration"
      ],
      "description": "Connect to WooCommerce system to start receiving product information. This establishes the connection between your 3D application and the WooCommerce e-commerce platform, enabling access to product data, attributes, and order management functionality."
    },
    "E-Commerce/wooProductInfo": {
      "category": "E-Commerce",
      "displayName": "product info",
      "searchTerms": [
        "product info",
        "E-Commerce/wooProductInfo",
        "product information",
        "WooCommerce product",
        "product details",
        "product data",
        "e-commerce product",
        "product attributes"
      ],
      "description": "Returns a dictionary with product information retrieved by the connect to WooCommerce puzzle. Contains fields: price, quantity, sku, name, attributes, weight, length, width, height, type, children (for group products), components (for composite products), and status. Useful for accessing current product selection and configuration."
    },
    "E-Commerce/wooProductAttribute": {
      "category": "E-Commerce",
      "displayName": "product attribute",
      "searchTerms": [
        "product attribute",
        "E-Commerce/wooProductAttribute",
        "product variation",
        "WooCommerce attribute",
        "product option",
        "attribute value",
        "product selection",
        "variation attribute"
      ],
      "description": "Returns the value for an attribute of the product option selected by the customer, e.g. 'Yellow' for attribute 'color'. Most frequently used to obtain the currently selected variation of a 'variable' product. Attribute names are matched case-insensitively. Useful for determining which product variation is currently selected."
    },
    "E-Commerce/wooProductComponent": {
      "category": "E-Commerce",
      "displayName": "product component",
      "searchTerms": [
        "product component",
        "E-Commerce/wooProductComponent",
        "WooCommerce component",
        "composite product",
        "product part",
        "component info",
        "composite product component",
        "product assembly"
      ],
      "description": "Returns a value from a product component provided by the WooCommerce Composite Products extension. Can specify either component name (title) or component ID. Available values: product name, sku, quantity, type, weight, width, height, length, attributes, component title, component id. Useful for accessing individual components of composite products."
    },
    "E-Commerce/placeOrder": {
      "category": "E-Commerce",
      "displayName": "place order",
      "searchTerms": [
        "place order",
        "E-Commerce/placeOrder",
        "submit order",
        "create order",
        "e-commerce order",
        "order form",
        "WordPress order",
        "order submission"
      ],
      "description": "Composes and submits an order form to a specified URL. By default submits to the sandbox ordering page. Requires send to URL, content, item price, and quantity. Includes make screenshot option to attach application screenshot to the order. Verge3D comes with a free WordPress plugin to handle these requests. Note: Order verification is recommended for security."
    },
    "E-Commerce/placeOrderAdv": {
      "category": "E-Commerce",
      "displayName": "place order +",
      "searchTerms": [
        "place order +",
        "E-Commerce/placeOrderAdv",
        "advanced order",
        "secure order",
        "order with attachments",
        "custom order",
        "enhanced order",
        "order with items"
      ],
      "description": "Composes and submits an order form to a specified URL with enhanced features, greater security, and customization options. Works similar to place order but supports order items, attachments (screenshots, images, sound, video, PDF, text, glTF models), and server-side product verification. Provides more secure and flexible ordering capabilities."
    },
    "E-Commerce/orderItem": {
      "category": "E-Commerce",
      "displayName": "order item (sku, qty)",
      "searchTerms": [
        "order item (sku, qty)",
        "E-Commerce/orderItem",
        "order item",
        "order line item",
        "product sku",
        "product quantity",
        "order product",
        "line item"
      ],
      "description": "Order item to be used in the place order + puzzle. Requires SKU (stock keeping unit) of the product registered by WordPress plugin and quantity amount. This puzzle creates individual line items for orders with multiple products or product variations."
    },
    "SCORM/LMSInitialize": {
      "category": "E-Learning/SCORM",
      "displayName": "lms initialize",
      "searchTerms": [
        "lms initialize",
        "SCORM/LMSInitialize",
        "LMS initialize",
        "SCORM initialize",
        "learning management system",
        "start SCORM session",
        "connect to LMS",
        "SCORM connection"
      ],
      "description": "Start a communication session with the LMS (learning management system). This establishes the connection between your SCORM package and the learning management system, enabling data exchange and tracking. Essential for beginning any SCORM-based e-learning interaction."
    },
    "SCORM/LMSFinish": {
      "category": "E-Learning/SCORM",
      "displayName": "lms finish",
      "searchTerms": [
        "lms finish",
        "SCORM/LMSFinish",
        "LMS finish",
        "SCORM finish",
        "end SCORM session",
        "close LMS connection",
        "terminate SCORM",
        "SCORM cleanup"
      ],
      "description": "Close a communication session with the LMS. You can execute this puzzle any time when you're done communicating, however it's better to include it in the 'beforeunload' event handler to ensure proper session termination. This ensures data is properly saved and the session is cleanly ended."
    },
    "SCORM/LMSSetValue": {
      "category": "E-Learning/SCORM",
      "displayName": "lms set value",
      "searchTerms": [
        "lms set value",
        "SCORM/LMSSetValue",
        "LMS set value",
        "SCORM set value",
        "set LMS data",
        "update SCORM data",
        "write to LMS",
        "SCORM data write"
      ],
      "description": "Set a value for the given LMS element. This allows you to send data to the learning management system, such as lesson status, scores, location, session time, and other SCORM data model elements. Use commit to ensure data is synchronized with the LMS."
    },
    "SCORM/LMSGetValue": {
      "category": "E-Learning/SCORM",
      "displayName": "lms get value",
      "searchTerms": [
        "lms get value",
        "SCORM/LMSGetValue",
        "LMS get value",
        "SCORM get value",
        "get LMS data",
        "retrieve SCORM data",
        "read from LMS",
        "SCORM data read"
      ],
      "description": "Retrieves a value from the LMS element. This allows you to read data from the learning management system, such as student information, lesson status, scores, and other SCORM data model elements. Useful for accessing student progress and course state."
    },
    "SCORM/LMSCommit": {
      "category": "E-Learning/SCORM",
      "displayName": "lms commit",
      "searchTerms": [
        "lms commit",
        "SCORM/LMSCommit",
        "LMS commit",
        "SCORM commit",
        "sync LMS data",
        "commit SCORM data",
        "synchronize LMS",
        "SCORM sync"
      ],
      "description": "Report to LMS that it should sync data received by the lms set value puzzle. Executing commit is not strictly required, however it can increase responsiveness of the UI in some LMS. For example, the Moodle LMS updates scores and lesson status upon commit."
    },
    "SCORM/LMSGetLastError": {
      "category": "E-Learning/SCORM",
      "displayName": "lms get last error",
      "searchTerms": [
        "lms get last error",
        "SCORM/LMSGetLastError",
        "LMS get last error",
        "SCORM get last error",
        "get LMS error",
        "SCORM error code",
        "LMS error code",
        "SCORM error"
      ],
      "description": "Returns the error code (encoded as string) that resulted from the last communication with LMS. The '0' value indicates that there is no error happened. Use this to check for communication errors and handle them appropriately in your SCORM application."
    },
    "SCORM/LMSGetErrorString": {
      "category": "E-Learning/SCORM",
      "displayName": "lms get error string",
      "searchTerms": [
        "lms get error string",
        "SCORM/LMSGetErrorString",
        "LMS get error string",
        "SCORM get error string",
        "get error description",
        "SCORM error description",
        "LMS error description",
        "error message"
      ],
      "description": "Returns a short string describing the specified error code. This provides human-readable error messages for debugging and user feedback. Use this in combination with lms get last error to provide meaningful error information."
    },
    "SCORM/LMSGetDiagnostic": {
      "category": "E-Learning/SCORM",
      "displayName": "lms get diagnostic",
      "searchTerms": [
        "lms get diagnostic",
        "SCORM/LMSGetDiagnostic",
        "LMS get diagnostic",
        "SCORM get diagnostic",
        "get SCORM diagnostic",
        "LMS diagnostic info",
        "SCORM debug info",
        "diagnostic information"
      ],
      "description": "Returns detailed information about the last error that occurred. This provides comprehensive diagnostic information for debugging SCORM communication issues. Useful for troubleshooting and understanding the root cause of SCORM errors."
    },
    "SCORM/dataModelElements": {
      "category": "E-Learning/SCORM",
      "displayName": "data model elements",
      "searchTerms": [
        "data model elements",
        "SCORM/dataModelElements",
        "SCORM elements",
        "LMS elements",
        "SCORM data model",
        "LMS data model",
        "SCORM parameters",
        "data elements"
      ],
      "description": "List of the data model elements which can be assigned/retrieved by the SCORM package. In SCORM terminology, 'element' is just a parameter which is sent to/received from the LMS. Includes core elements like lesson_status, student_id, score, session_time, and others. For non-standard elements, use text input directly."
    },
    "SCORM/packAddItem": {
      "category": "E-Learning/SCORM",
      "displayName": "pack add item",
      "searchTerms": [
        "pack add item",
        "SCORM/packAddItem",
        "add SCORM item",
        "SCORM pack item",
        "add manifest item",
        "SCORM manifest",
        "multi-page course",
        "SCORM content"
      ],
      "description": "Add an item to the manifest of the generated SCORM pack. This puzzle is useful for creating multi-page courses which can run different content depending on the selected item. Enables complex course structures with multiple learning modules or sections."
    },
    "SCORM/getItemID": {
      "category": "E-Learning/SCORM",
      "displayName": "pack get item ID",
      "searchTerms": [
        "pack get item ID",
        "SCORM/getItemID",
        "get SCORM item ID",
        "get pack item ID",
        "current item ID",
        "SCORM item identifier",
        "manifest item ID",
        "content item ID"
      ],
      "description": "Retrieve an ID of the currently loaded item from the SCORM pack. The 'in parent doc' checkbox should be enabled if the Verge3D app's .html file is embedded using iframe. Useful for determining which content item is currently active in multi-page courses."
    }
  },
  "categories": {
    "Events": {
      "color": "#b25050",
      "description": "Blocks related to Events"
    },
    "Selectors": {
      "color": "#50b2b2",
      "description": "Blocks related to Selectors"
    },
    "Objects": {
      "color": "#50b271",
      "description": "Blocks related to Objects"
    },
    "Materials": {
      "color": "#50b271",
      "description": "Blocks related to Materials"
    },
    "Animation": {
      "color": "#50b271",
      "description": "Blocks related to Animation"
    },
    "Cameras/Lights": {
      "color": "#50b271",
      "description": "Blocks related to Cameras/Lights"
    },
    "Scenes": {
      "color": "#e96868",
      "description": "Blocks related to Scenes"
    },
    "Time": {
      "color": "#6565dd",
      "description": "Blocks related to Time"
    },
    "HTML": {
      "color": "#b26850",
      "description": "Blocks related to HTML"
    },
    "AR/VR": {
      "color": "#b122c4",
      "description": "Blocks related to AR/VR"
    },
    "Audio/Video": {
      "color": "#b2a250",
      "description": "Blocks related to Audio/Video"
    },
    "Physics": {
      "color": "#5f636e",
      "description": "Blocks related to Physics"
    },
    "Post-processing": {
      "color": "#5c145b",
      "description": "Blocks related to Post-processing"
    },
    "Logic": {
      "color": "#5081b2",
      "description": "Blocks related to Logic"
    },
    "Loops": {
      "color": "#50b250",
      "description": "Blocks related to Loops"
    },
    "Text": {
      "color": "#50b291",
      "description": "Blocks related to Text"
    },
    "Numbers": {
      "color": "#5060b2",
      "description": "Blocks related to Numbers"
    },
    "Lists": {
      "color": "#7150b2",
      "description": "Blocks related to Lists"
    },
    "Dictionaries": {
      "color": "#006fa5",
      "description": "Blocks related to Dictionaries"
    },
    "System": {
      "color": "#b28150",
      "description": "Blocks related to System"
    },
    "Advanced": {
      "color": "#5845f6",
      "description": "Blocks related to Advanced"
    },
    "Adam's Custom Tools": {
      "color": "#de3900",
      "description": "Blocks related to Adam's Custom Tools"
    },
    "E-Commerce": {
      "color": "#d4af37",
      "description": "Blocks related to E-Commerce"
    },
    "E-Learning/SCORM": {
      "color": "#500000",
      "description": "Blocks related to E-Learning/SCORM"
    }
  }
}; 

        const originalPrepare = puzzlesEditorPreparePreloader;
        puzzlesEditorPreparePreloader = function(preloader, PE) {
            window.__PE__ = PE;
            console.log('âœ… Captured Puzzle Editor:', PE);

            return originalPrepare(preloader, PE);
        };

      `;
    }
</script>
